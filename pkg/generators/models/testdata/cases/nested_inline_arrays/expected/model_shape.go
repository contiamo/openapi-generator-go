// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Test
//	Version: 0.1.0
package generatortest

import (
	"encoding/json"

	validation "github.com/go-ozzo/ozzo-validation/v4"
)

// Shape is an object.
type Shape struct {
	// Coordinates:
	Coordinates []Line `json:"coordinates,omitempty" mapstructure:"coordinates,omitempty"`
	// Type:
	Type string `json:"type,omitempty" mapstructure:"type,omitempty"`
}

// NewShape instantiates a new Shape with default values overriding them as follows:
// 1. Default values specified in the Shape schema
// 2. Default values specified per Shape property
func NewShape() *Shape {
	m := &Shape{}

	return m
}

// UnmarshalJSON implements the json.Unmarshaler interface for Shape. It set the default values for the Shape type
func (m *Shape) UnmarshalJSON(data []byte) error {
	// Set default values
	*m = *NewShape()

	// Unmarshal using an alias to avoid an infinite loop
	type alias Shape
	err := json.Unmarshal(data, (*alias)(m))
	if err != nil {
		return err
	}
	return nil
}

// Validate implements basic validation for this model
func (m Shape) Validate() error {
	errors := validation.Errors{
		"coordinates": validation.Validate(
			m.Coordinates,
		),
	}
	return errors.Filter()
}

// GetCoordinates returns the Coordinates property
func (m Shape) GetCoordinates() []Line {
	return m.Coordinates
}

// SetCoordinates sets the Coordinates property
func (m *Shape) SetCoordinates(val []Line) {
	m.Coordinates = val
}

// GetType returns the Type property
func (m Shape) GetType() string {
	return m.Type
}

// SetType sets the Type property
func (m *Shape) SetType(val string) {
	m.Type = val
}
