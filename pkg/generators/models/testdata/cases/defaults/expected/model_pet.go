// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Test
//	Version: 0.1.0
package generatortest

import (
	"encoding/json"
	"fmt"

	validation "github.com/go-ozzo/ozzo-validation/v4"
)

// Pet is an object.
type Pet struct {
	// Age:
	Age int32 `json:"age,omitempty" mapstructure:"age,omitempty"`
	// Name:
	Name string `json:"name,omitempty" mapstructure:"name,omitempty"`
	// Type:
	Type PetType `json:"type,omitempty" mapstructure:"type,omitempty"`
}

// NewPet instantiates a new Pet with default values overriding them as follows:
// 1. Default values specified in the Pet schema
// 2. Default values specified per Pet property
func NewPet() *Pet {
	m := &Pet{
		Age:  1,
		Type: DefaultPetType,
	}

	type alias Pet
	err := json.Unmarshal([]byte(`{"age":2,"name":"Fido","type":"dog"}`), (*alias)(m))
	if err != nil {
		panic(fmt.Errorf("could not unmarshal default values for Pet: %w", err))
	}

	return m
}

// UnmarshalJSON implements the json.Unmarshaler interface for Pet. It set the default values for the Pet type
func (m *Pet) UnmarshalJSON(data []byte) error {
	// Set default values
	*m = *NewPet()

	// Unmarshal using an alias to avoid an infinite loop
	type alias Pet
	err := json.Unmarshal(data, (*alias)(m))
	if err != nil {
		return err
	}
	return nil
}

// Validate implements basic validation for this model
func (m Pet) Validate() error {
	errors := validation.Errors{
		"type": validation.Validate(
			m.Type,
		),
	}
	return errors.Filter()
}

// GetAge returns the Age property
func (m Pet) GetAge() int32 {
	return m.Age
}

// SetAge sets the Age property
func (m *Pet) SetAge(val int32) {
	m.Age = val
}

// GetName returns the Name property
func (m Pet) GetName() string {
	return m.Name
}

// SetName sets the Name property
func (m *Pet) SetName(val string) {
	m.Name = val
}

// GetType returns the Type property
func (m Pet) GetType() PetType {
	return m.Type
}

// SetType sets the Type property
func (m *Pet) SetType(val PetType) {
	m.Type = val
}
