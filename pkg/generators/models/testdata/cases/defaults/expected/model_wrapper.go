// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: Test
//	Version: 0.1.0
package generatortest

import (
	"encoding/json"

	validation "github.com/go-ozzo/ozzo-validation/v4"
)

// Wrapper is an object.
type Wrapper struct {
	// Bool:
	Bool bool `json:"bool,omitempty" mapstructure:"bool,omitempty"`
	// Cat:
	Cat *Pet `json:"cat,omitempty" mapstructure:"cat,omitempty"`
	// Email:
	Email Email `json:"email,omitempty" mapstructure:"email,omitempty"`
	// EnumInteger:
	EnumInteger EnumInteger `json:"enumInteger,omitempty" mapstructure:"enumInteger,omitempty"`
	// EnumString:
	EnumString EnumString `json:"enumString,omitempty" mapstructure:"enumString,omitempty"`
	// InlineStruct:
	InlineStruct *WrapperInlineStruct `json:"inlineStruct,omitempty" mapstructure:"inlineStruct,omitempty"`
	// IntegerArray:
	IntegerArray []int32 `json:"integerArray,omitempty" mapstructure:"integerArray,omitempty"`
	// Person:
	Person *Person `json:"person,omitempty" mapstructure:"person,omitempty"`
	// String:
	String String `json:"string,omitempty" mapstructure:"string,omitempty"`
}

// NewWrapper instantiates a new Wrapper with default values overriding them as follows:
// 1. Default values specified in the Wrapper schema
// 2. Default values specified per Wrapper property
func NewWrapper() *Wrapper {
	m := &Wrapper{
		Bool:         true,
		Cat:          NewPet(),
		Email:        DefaultEmail,
		EnumInteger:  DefaultEnumInteger,
		EnumString:   DefaultEnumString,
		InlineStruct: NewWrapperInlineStruct(),
		IntegerArray: []int32{1, 3},
		Person:       NewPerson(),
		String:       DefaultString,
	}

	return m
}

// UnmarshalJSON implements the json.Unmarshaler interface for Wrapper. It set the default values for the Wrapper type
func (m *Wrapper) UnmarshalJSON(data []byte) error {
	// Set default values
	*m = *NewWrapper()

	// Unmarshal using an alias to avoid an infinite loop
	type alias Wrapper
	err := json.Unmarshal(data, (*alias)(m))
	if err != nil {
		return err
	}
	return nil
}

// Validate implements basic validation for this model
func (m Wrapper) Validate() error {
	errors := validation.Errors{
		"cat": validation.Validate(
			m.Cat,
		),
		"email": validation.Validate(
			m.Email,
		),
		"enumInteger": validation.Validate(
			m.EnumInteger,
		),
		"enumString": validation.Validate(
			m.EnumString,
		),
		"inlineStruct": validation.Validate(
			m.InlineStruct,
		),
		"integerArray": validation.Validate(
			m.IntegerArray,
		),
		"person": validation.Validate(
			m.Person,
		),
		"string": validation.Validate(
			m.String,
		),
	}
	return errors.Filter()
}

// GetBool returns the Bool property
func (m Wrapper) GetBool() bool {
	return m.Bool
}

// SetBool sets the Bool property
func (m *Wrapper) SetBool(val bool) {
	m.Bool = val
}

// GetCat returns the Cat property
func (m Wrapper) GetCat() *Pet {
	return m.Cat
}

// SetCat sets the Cat property
func (m *Wrapper) SetCat(val *Pet) {
	m.Cat = val
}

// GetEmail returns the Email property
func (m Wrapper) GetEmail() Email {
	return m.Email
}

// SetEmail sets the Email property
func (m *Wrapper) SetEmail(val Email) {
	m.Email = val
}

// GetEnumInteger returns the EnumInteger property
func (m Wrapper) GetEnumInteger() EnumInteger {
	return m.EnumInteger
}

// SetEnumInteger sets the EnumInteger property
func (m *Wrapper) SetEnumInteger(val EnumInteger) {
	m.EnumInteger = val
}

// GetEnumString returns the EnumString property
func (m Wrapper) GetEnumString() EnumString {
	return m.EnumString
}

// SetEnumString sets the EnumString property
func (m *Wrapper) SetEnumString(val EnumString) {
	m.EnumString = val
}

// GetInlineStruct returns the InlineStruct property
func (m Wrapper) GetInlineStruct() *WrapperInlineStruct {
	return m.InlineStruct
}

// SetInlineStruct sets the InlineStruct property
func (m *Wrapper) SetInlineStruct(val *WrapperInlineStruct) {
	m.InlineStruct = val
}

// GetIntegerArray returns the IntegerArray property
func (m Wrapper) GetIntegerArray() []int32 {
	return m.IntegerArray
}

// SetIntegerArray sets the IntegerArray property
func (m *Wrapper) SetIntegerArray(val []int32) {
	m.IntegerArray = val
}

// GetPerson returns the Person property
func (m Wrapper) GetPerson() *Person {
	return m.Person
}

// SetPerson sets the Person property
func (m *Wrapper) SetPerson(val *Person) {
	m.Person = val
}

// GetString returns the String property
func (m Wrapper) GetString() String {
	return m.String
}

// SetString sets the String property
func (m *Wrapper) SetString(val String) {
	m.String = val
}
