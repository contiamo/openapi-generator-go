// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: {{.SpecTitle}}
//	Version: {{.SpecVersion}}
package {{ .PackageName }}

import (
	"encoding/json"
	"github.com/mitchellh/mapstructure"
	{{- if .Discriminator.Field }}
	"fmt"
	validation "github.com/go-ozzo/ozzo-validation/v4"
	{{- end}}
)

{{- $modelName := .Name }}
{{- $interfaceName := (printf "%ser" .Name) | firstLower}}
{{ $discriminator := .Discriminator.Field|toPascalCase }}


{{- if .Discriminator.Field }}
// {{$modelName}}Discriminator is the discriminator value used during serialization and validation.
// Retrieve this value using  the {{$modelName}}Discriminator() method
type {{$modelName}}Discriminator string

const (
{{- range $value, $type := .Discriminator.Map }}
	// {{$modelName}}Discriminator{{$value | toPascalCase | firstUpper}} maps {{$modelName}} to {{$type}}
	{{$modelName}}Discriminator{{$value | toPascalCase | firstUpper}} {{$modelName}}Discriminator = "{{$value}}"
{{- end}}
)

type {{$interfaceName}} interface {
	{{$modelName}}Discriminator() {{$modelName}}Discriminator
	Validate() error
}
{{- end}}

{{ (printf "%s is a oneOf type. %s" .Name .Description) | commentBlock }}
type {{$modelName}} struct {
	{{- if .Discriminator.Field }}
	data {{$interfaceName}}
	{{- else }}
	data interface{}
	{{- end }}
}

// New{{$modelName}} creates a new {{$modelName}} instance with no internal value.
func New{{$modelName}}() *{{$modelName}} {
	return &{{$modelName}}{}
}

{{- if .Discriminator.Field }}
var Empty{{$modelName}}Error = fmt.Errorf("empty data is not an {{$modelName}}")
var Not{{$modelName}}Error = fmt.Errorf("could not convert to type {{$modelName}}")

type {{$modelName}}NilableRule struct{}

func (nn {{$modelName}}NilableRule) Validate(v interface{}) error {
	if m, ok := v.({{$modelName}}); !ok {
		return Not{{$modelName}}Error
	} else if m.data == nil {
		return nil
	} else {
		return m.Validate()
	}
}
{{- end }}

// MarshalJSON implements the json.Marshaller interface
func (m {{$modelName}}) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.data)
}

// UnmarshalJSON implements the json.Unmarshaller interface
func (m *{{$modelName}}) UnmarshalJSON(bs []byte) error {
	{{- if .Discriminator.Field }}
	discriminator := struct {
		Value string  `json:"{{.Discriminator.Field}}"`
	}{}
	err := json.Unmarshal(bs, &discriminator)
	if err != nil {
		return err
	}

	if discriminator.Value == "" {
		return validation.Errors{
			"{{.Discriminator.Field}}": fmt.Errorf("can not be empty"),
		}.Filter()
	}

	value := fmt.Sprintf("%v",discriminator.Value)
	switch {{$modelName}}Discriminator(value) {
	{{- range $value, $type := .Discriminator.Map }}
	case {{$modelName}}Discriminator{{$value | toPascalCase | firstUpper}}:
		data := {{$type|toPascalCase}}{}
		err := json.Unmarshal(bs, &data)
		if err != nil {
			return err
		}
		m.data = data
	{{- end}}
	default:
		return validation.Errors{
			"{{.Discriminator.Field}}": fmt.Errorf("invalid value"),
		}.Filter()
	}
	return nil
	{{- else}}
	return json.Unmarshal(bs, &m.data)
	{{- end}}
}

{{- range $convert := .ConvertSpecs }}
{{ $star := $convert.IsPtr | ternary "*" "" }}
{{ $nullable := $convert.IsPtr | ternary "Nullable" "" }}
{{ (printf "From%s%s sets the %s from a %s%s"  $nullable ($convert.TargetGoType | typeDisplayName) $modelName  $star $convert.TargetGoType) | commentBlock }}
func (m *{{$modelName}}) From{{$nullable}}{{$convert.TargetGoType | typeDisplayName}}(data {{$star}}{{$convert.TargetGoType}}) {
	m.data = data
}

{{- end }}

// As converts {{$modelName}} to a user defined structure.
func (m {{$modelName}}) As(target interface{}) error {
	{{- if .Discriminator.Field }}
	if m.data == nil {
		return Empty{{$modelName}}Error
	}
	{{- end }}
	return mapstructure.Decode(m.data, target)
}

{{- range $convert := .ConvertSpecs }}
{{ $star := $convert.IsPtr | ternary "*" "" }}
{{ $nullable := $convert.IsPtr | ternary "Nullable" "" }}
{{ (printf "As%s%s converts %s to a %s%s" $nullable ($convert.TargetGoType | typeDisplayName) $modelName $star $convert.TargetGoType) | commentBlock }}
func (m {{$modelName}}) As{{$nullable}}{{$convert.TargetGoType | typeDisplayName }}() (result {{$star}}{{$convert.TargetGoType}}, err error) {
	{{- if $.Discriminator.Field }}
	if m.data == nil {
		return result, Empty{{$modelName}}Error
	}
	{{- end }}
	{{- if and $convert.HasDefault (not $convert.IsStruct) }}
    result = {{ if $convert.IsRef }}Default{{$convert.TargetGoType}}{{ else }}{{$convert.DefaultValue}}{{ end }}
	{{- else if and $convert.IsStruct }}
    result = {{ if not $convert.IsPtr}}*{{ end }}New{{$convert.TargetGoType}}()
	{{ end }}
	return result, mapstructure.Decode(m.data, &result)
}
{{- end}}


{{ if .Discriminator.Field }}
// Discriminator returns the {{$modelName}}Discriminator oneOf value
func (m {{$modelName}}) Discriminator() {{$modelName}}Discriminator {
	return m.data.{{$modelName}}Discriminator()
}

// Validate implements basic validation for this model
func (m {{$modelName}}) Validate() error {
	{{- if .Discriminator.Field }}
	if m.data == nil {
		return Empty{{$modelName}}Error
	}
	{{- end }}
	discriminator := m.data.{{$modelName}}Discriminator()
	switch discriminator {
	{{- range $value, $type := .Discriminator.Map }}
	case {{$modelName}}Discriminator{{$value | toPascalCase | firstUpper}}:
		return m.data.Validate()
	{{- end}}
	default:
		return validation.Errors{
			"{{.Discriminator.Field}}": fmt.Errorf("unknown {{.Discriminator.Field}} value"),
		}.Filter()
	}
}

// Is{{$modelName}} tests if data is one of the discriminated sub-types of {{$modelName}}.
func Is{{$modelName}}(data interface{}) bool {
	t, ok := data.({{$interfaceName}})
	if !ok {
		return false
	}

	discriminator := t.{{$modelName}}Discriminator()
	switch discriminator {
	{{- range $value, $type := .Discriminator.Map }}
	case {{$modelName}}Discriminator{{$value | toPascalCase | firstUpper}}:
		return true
	{{- end}}
	default:
		return false
	}
}

{{- range $convert := .ConvertSpecs }}
// {{$modelName}}Discriminator implements {{$interfaceName}} and returns the discriminator value.
func (m {{$convert.TargetGoType}}) {{$modelName}}Discriminator() {{$modelName}}Discriminator {
	value := fmt.Sprintf("%v", m.Get{{$discriminator}}())
	return {{$modelName}}Discriminator(value)
}

{{- end }}
{{- end }}
