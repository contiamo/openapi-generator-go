// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: {{.SpecTitle}}
//	Version: {{.SpecVersion}}
package {{ .PackageName }}

import (
{{- if or .Properties .HasDefault (and .AdditionalProperties .AdditionalProperties.HasDefault (not .AdditionalProperties.IsRef)) }}
	"encoding/json"
{{- end }}
{{- if or (and .Properties .AdditionalProperties) .HasDefault }}
	"fmt"
{{- end}}
{{- if and .Properties .AdditionalProperties }}
	"strings"
{{- end}}

	validation "github.com/go-ozzo/ozzo-validation/v4"

{{- range $package, $alias := .Imports}}
	{{$alias}} "{{$package}}"
{{- end}}
)

{{- $modelName := .Name }}

{{- range .Properties}}
{{- if .IsRef }}{{ continue }}{{ end }}
{{- if .PatternErrorMsg}}
// {{ $modelName}}{{.Name}}PatternError is the error message returned for pattern validation errors on {{$modelName}}.{{.Name}}
var {{ $modelName}}{{.Name}}PatternError = validation.NewError("validation_{{.Name }}_pattern_invalid", "{{.PatternErrorMsg}}")
{{- end }}
{{- if .Pattern }}
// {{ $modelName | firstLower}}{{.Name}}Pattern is the validation pattern for {{$modelName}}.{{.Name}}
var {{ $modelName | firstLower }}{{.Name}}Pattern = regexp.MustCompile(`{{ .Pattern }}`)
{{- end }}
{{- end }}
{{- if and .Properties .AdditionalProperties }}
{{- if .AdditionalProperties.PatternErrorMsg}}
// {{ $modelName}}AdditionalPropertiesPatternError is the error message returned for pattern validation errors on {{$modelName}}.AdditionalProperties
var {{ $modelName}}AdditionalPropertiesPatternError = validation.NewError("validation_additional_properties_pattern_invalid", "{{.AdditionalProperties.PatternErrorMsg}}")
{{- end }}
{{- if .AdditionalProperties.Pattern }}
// {{ $modelName | firstLower}}AdditionalPropertiesPattern is the validation pattern for {{$modelName}}.AdditionalProperties
var {{ $modelName | firstLower }}AdditionalPropertiesPattern = regexp.MustCompile(`{{ .AdditionalProperties.Pattern }}`)
{{ end }}
{{- end }}
{{- if and (not .Properties) .AdditionalProperties }}
    {{- if .AdditionalProperties.PatternErrorMsg}}
		// {{ $modelName}}PatternError is the error message returned for pattern validation errors on {{$modelName}}
		var {{ $modelName}}PatternError = validation.NewError("validation_additional_properties_pattern_invalid", "{{.AdditionalProperties.PatternErrorMsg}}")
    {{- end }}
    {{- if .AdditionalProperties.Pattern }}
		// {{$modelName | firstLower}}Pattern is the validation pattern for {{$modelName}}
		var {{$modelName | firstLower}}Pattern = regexp.MustCompile(`{{ .AdditionalProperties.Pattern }}`)
    {{ end }}
{{- end }}


{{- if and .Properties .AdditionalProperties }}
    {{ template "model_type_additional" . }}
{{- else }}
    {{ template "model_type_simple" . }}
{{- end }}

// New{{.Name}} instantiates a new {{.Name}} with default values overriding them as follows:
// 1. Default values specified in the {{.Name}} schema
// 2. Default values specified per {{.Name}} property
func New{{.Name}}() {{if not .IsMap}}*{{end}}{{.Name}} {
	m := {{if not .IsMap}}&{{end}}{{.Name}}{
	{{- range .Properties}}
    	{{- if and .HasDefault (not .IsStruct) }}
        {{.Name}}: {{ if .IsRef }}Default{{.GoType}}{{ else }}{{.DefaultValue}}{{ end }},
    	{{- else if and .IsStruct }}
        {{.Name}}: {{ if not .IsPtr}}*{{ end }}New{{.GoType}}(),
    	{{- end}}
	{{- end }}
	}

	{{ if .HasDefault }}
	type alias {{.Name}}
	err := json.Unmarshal([]byte(`{{.DefaultValue}}`), (*alias)({{if .IsMap}}&{{end}}m))
	if err != nil {
		panic(fmt.Errorf("could not unmarshal default values for {{.Name}}: %w", err))
	}
	{{- end}}

	return m
}

{{- if and .Properties .AdditionalProperties }}
    {{ template "model_json_additional" . }}
{{- else }}
    {{ template "model_json_simple" . }}
{{- end }}

{{ define "prop_validation" }}
	{{- $modelName := .ModelName }}
	{{- $prop := .Prop}}
    {{- /* isRequired: {{$prop.IsRequired}}, isPtr: {{$prop.IsPtr}}, isString: {{$prop.IsString}}, isMap: {{$prop.IsMap}}, isEnum: {{$prop.IsEnum}}, hasFormat: {{$prop.HasFormat}}, hasMin: {{$prop.HasMin}}, min: {{$prop.Min}}, hasMax: {{$prop.HasMax}}, max: {{$prop.Max}}, hasMinLength: {{$prop.HasMinLength}}, minLength: {{$prop.MinLength}}, hasMaxLength: {{$prop.HasMaxLength}}, maxLength: {{$prop.MaxLength}} */}}
    {{- range $prop.DerivedValidations }}{{.}},{{ end }}
    {{- if not $prop.IsRef }}
        {{- if $prop.HasMin }}validation.Min({{ $prop.GoType }}({{ $prop.Min }})),{{ end }}
        {{- if $prop.HasMax }}validation.Max({{ $prop.GoType }}({{ $prop.Max }})),{{ end }}
        {{- if or $prop.HasMinLength $prop.HasMaxLength }}validation.Length({{ $prop.MinLength }},{{ $prop.MaxLength }}),{{ end }}
        {{- if or $prop.HasMinItems $prop.HasMaxItems }}validation.Length({{ $prop.MinItems }},{{ $prop.MaxItems }}),{{ end }}
        {{- if or $prop.HasMinProps $prop.HasMaxProps }}validation.Length({{ $prop.MinProps }},{{ $prop.MaxProps }}),{{ end }}
        {{- if $prop.IsDate }}validation.Date("2006-01-02"),{{ end }}
        {{- if $prop.IsDateTime }}validation.Date(time.RFC3339),{{ end }}
        {{- if $prop.IsBase64 }}is.Base64,{{ end }}
        {{- if $prop.IsEmail }}is.EmailFormat,{{ end }}
        {{- if $prop.IsUUID }}is.UUID,{{ end }}
        {{- if $prop.IsURL }}is.URL.Error("must be a valid URL with HTTP or HTTPS scheme"),{{ end }}
        {{- if $prop.IsURI }}is.RequestURI,{{ end }}
        {{- if $prop.IsRequestURI }}is.RequestURL.Error("must be valid URI with scheme"),{{ end }}
        {{- if $prop.IsHostname }}is.Host,{{ end }}
        {{- if $prop.IsIPv4 }}is.IPv4,{{ end }}
        {{- if $prop.IsIPv6 }}is.IPv6,{{ end }}
        {{- if $prop.IsIP }}is.IP,{{ end }}
        {{- if $prop.Pattern }}validation.Match({{$modelName | firstLower}}{{$prop.Name}}Pattern){{if $prop.PatternErrorMsg}}.ErrorObject({{$modelName}}{{$prop.Name}}PatternError){{end}},{{ end }}
    {{- else if $prop.IsOneOf }}
        {{$prop.GoType}}NilableRule{},
		validation.Skip,
    {{- end }}
{{- end }}

// Validate implements basic validation for this model
func (m {{$modelName}}) Validate() error {
	errors := validation.Errors{
		{{- range .Properties}}
			{{- if .NeedsValidation }}
				"{{ firstLower .Name }}": validation.Validate(
					m.{{ .Name }}, {{- template "prop_validation" (map "ModelName" $modelName "Prop" .) }}
				),
			{{- end }}
		{{- end }}
	}

	{{- if or .IsMap .AdditionalProperties }}
	for k, v := range m{{ if and .AdditionalProperties .Properties }}.AdditionalProperties{{ end }} {
		if err := validation.Validate(v{{if .AdditionalProperties}}, {{template "prop_validation" (map "ModelName" $modelName "Prop" .AdditionalProperties)}}{{end}}); err != nil {
			errors[k] =  err
		}
	}
	{{- end }}
	return errors.Filter()
}
{{ range .Properties}}
// Get{{.Name}} returns the {{.Name}} property
func (m {{$modelName}}) Get{{.Name}}() {{if .IsPtr}}*{{end}}{{.GoType}} {
	return m.{{.Name}}
}

// Set{{.Name}} sets the {{.Name}} property
func (m *{{$modelName}}) Set{{.Name}}(val {{if .IsPtr}}*{{end}}{{.GoType}}) {
	m.{{.Name}} = val
}
{{ end}}
{{- if and .AdditionalProperties .Properties }}
func (m *{{$modelName}}) GetAdditionalProperties() map[string]{{if .AdditionalProperties.IsPtr}}*{{end}}{{.AdditionalProperties.GoType}} {
	return m.AdditionalProperties
}

func (m *{{$modelName}}) SetAdditionalProperties(val map[string]{{if .AdditionalProperties.IsPtr}}*{{end}}{{.AdditionalProperties.GoType}}) {
	m.AdditionalProperties = val
}
{{- end }}
