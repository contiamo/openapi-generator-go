// Code generated by openapi-generator-go DO NOT EDIT.
//
// Source:
//
//	Title: {{.SpecTitle}}
//	Version: {{.SpecVersion}}
package {{ .PackageName }}

import (
	{{- if .AdditionalPropertiesGoType}}
	"encoding/json"
	{{- end}}

	validation "github.com/go-ozzo/ozzo-validation/v4"

{{- range $package, $alias := .Imports}}
	{{$alias}} "{{$package}}"
{{- end}}
)

{{- $modelName := .Name }}

{{- range .Properties}}
{{- if .PatternErrorMsg}}
// {{ $modelName}}{{.Name}}PatternError is the error message returned for pattern validation errors on {{ $modelName}}.{{.Name}}
var {{ $modelName}}{{.Name}}PatternError = validation.NewError("validation_{{.Name }}_pattern_invalid", "{{.PatternErrorMsg}}")
{{- end }}
{{- if .Pattern }}
// {{ $modelName | firstLower}}{{.Name}}Pattern is the validation pattern for {{ $modelName}}.{{.Name}}
var {{ $modelName | firstLower }}{{.Name}}Pattern = regexp.MustCompile(`{{ .Pattern }}`)
{{ end }}
{{- end}}

{{ (printf "%s is an object. %s" .Name .Description) | commentBlock }}
{{- if not .AdditionalPropertiesGoType }}
{{- if not .Properties }}
type {{.Name}} {{ .GoType }}
{{- else }}
type {{.Name}} struct {
{{- range .Properties}}
	{{ (printf "%s: %s" .Name .Description) | commentBlock }}
	{{.Name}} {{.GoType}} {{.JSONTags}}
{{- end}}
}
{{- end}}
{{- else }}
type {{.Name}} struct {
	{{.Name}}Properties
	AdditionalProperties map[string]{{.AdditionalPropertiesGoType}}
}

type {{.Name}}Properties struct {
	{{- range .Properties}}
	{{ (printf "%s: %s" .Name .Description) | commentBlock }}
	{{.Name}} {{.GoType}} {{.JSONTags}}
	{{- end}}
}

// Unmarshal all named properties into {{.Name}}Properties and
// the rest into the AdditionalProperties map
func (obj *{{.Name}}) UnmarshalJSON(data []byte) error {
	var generic map[string]json.RawMessage
	if err := json.Unmarshal(data, &generic); err != nil {
		return err
	}

	obj.{{.Name}}Properties = {{.Name}}Properties{}

	var additionalProperties = make(map[string]{{.AdditionalPropertiesGoType}})
	for k, v := range generic {
		{{- range .Properties}}
		if k == "{{.PropertyName}}" {
			if err := json.Unmarshal(v, &(obj.{{$.Name}}Properties.{{.Name}})); err != nil {
				return err
			}
			continue
		}
		{{- end}}
		var prop {{.AdditionalPropertiesGoType}}
		if err := json.Unmarshal(v, &prop); err != nil {
			return err
		}
		additionalProperties[k] = prop
	}

	obj.AdditionalProperties = additionalProperties
	return nil
}

// Marshal {{.Name}} by combining the AdditionalProperties with the
// named properties in a single JSON object. Named properties take
// precedence.
func (obj {{.Name}}) MarshalJSON() ([]byte, error) {
	props := make(map[string]json.RawMessage)

	// start with additional properties so regular properties overwrite them
	for k, v := range obj.AdditionalProperties {
		if propData, err := json.Marshal(v); err == nil {
			props[k] = propData
		} else {
			return nil, err
		}
	}

	{{- range .Properties}}
	if propData, err := json.Marshal(obj.{{$.Name}}Properties.{{.Name}}); err == nil {
		props["{{.PropertyName}}"] = propData
	} else {
		return nil, err
	}
	{{- end}}

	data, err := json.Marshal(props)
	return data, err
}
{{- end }}

{{- $modelPropertiesName := $modelName }}
{{- if .AdditionalPropertiesGoType }}
  {{- $modelPropertiesName := print $modelName "Properties" }}
{{- end }}
// Validate implements basic validation for this model
func (m {{$modelPropertiesName}}) Validate() error {
	return validation.Errors{
		{{- range .Properties}}
			{{- if .NeedsValidation }}
				"{{ firstLower .Name }}": validation.Validate(
					m.{{ .Name }},
					{{- if and .IsRequiredInValidation}}
						{{- if or .IsEnum .Min .MinLength .HasFormat}}validation.Required,{{ else }}validation.NotNil,{{- end }}
					{{- end }}
					{{- if .HasMin }}validation.Min({{ .GoType }}({{ .Min }})),{{ end }}
					{{- if .HasMax }}validation.Max({{ .GoType }}({{ .Max }})),{{ end }}
					{{- if or .HasMinLength .HasMaxLength }}validation.Length({{ .MinLength }},{{ .MaxLength }}),{{ end }}
					{{- if .IsDate }}validation.Date("2006-01-02"),{{ end }}
					{{- if .IsDateTime }}validation.Date(time.RFC3339),{{ end }}
					{{- if .IsBase64 }}is.Base64,{{ end }}
					{{- if .IsEmail }}is.EmailFormat,{{ end }}
					{{- if .IsUUID }}is.UUID,{{ end }}
					{{- if .IsURL }}is.URL.Error("must be a valid URL with HTTP or HTTPS scheme"),{{ end }}
					{{- if .IsURI }}is.RequestURI,{{ end }}
					{{- if .IsRequestURI }}is.RequestURL.Error("must be valid URI with scheme"),{{ end }}
					{{- if .IsHostname }}is.Host,{{ end }}
					{{- if .IsIPv4 }}is.IPv4,{{ end }}
					{{- if .IsIPv6 }}is.IPv6,{{ end }}
					{{- if .IsIP }}is.IP,{{ end }}
					{{- if .Pattern }}validation.Match({{ $modelName | firstLower }}{{.Name}}Pattern){{if .PatternErrorMsg}}.ErrorObject({{ $modelName}}{{.Name}}PatternError){{end}},{{ end }}
					{{- if and .IsOneOf (not .IsRequiredInValidation) }}
					{{.GoType}}NilableRule{},
					validation.Skip,
					{{- end }}
				),
			{{- end }}
		{{- end }}
	}.Filter()
}
{{ range .Properties}}
// Get{{.Name}} returns the {{.Name}} property
func (m {{$modelPropertiesName}}) Get{{.Name}}() {{.GoType}} {
	return m.{{.Name}}
}

// Set{{.Name}} sets the {{.Name}} property
func (m *{{$modelPropertiesName}}) Set{{.Name}}(val {{.GoType}}) {
	m.{{.Name}} = val
}
{{ end}}
{{- if .AdditionalPropertiesGoType }}
func (m *{{$modelName}}) GetAdditionalProperties() map[string]{{.AdditionalPropertiesGoType}} {
	return m.AdditionalProperties
}

func (m *{{$modelName}}) SetAdditionalProperties(val map[string]{{.AdditionalPropertiesGoType}}) {
	m.AdditionalProperties = val
}
{{- end }}
