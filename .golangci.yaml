# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    - ^config

  # enable if you're bored
  tests: false

output:
  sort-results: true

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true
    # Check for plain type assertions and type switches
    asserts: true
    # Check for plain error comparisons
    comparison: true

  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 2

  makezero:
    # Allow only slices initialized with a length of zero. Default is false.
    always: true

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  forbidigo:
    # Forbid the following identifiers
    forbid:
      - fmt.Print.* # too much log noise
    # Exclude godoc examples from forbidigo checks.  Default is true.
    exclude_godoc_examples: true

  gomoddirectives:
    # Allow local `replace` directives. Default is false.
    replace-local: false

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    # ignore-words:
    #   - IdP

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 0

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  nolintlint:
    # Enable to ensure that nolint directives are all used. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

  stylecheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

  tagliatelle:
    # check the struck tag name case
    case:
      # use the struct field name to check the name of the struct tag
      use-field-name: true
      rules:
        # any struct tag type can be used.
        # support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: camel
        yaml: camel
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unused:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

  whitespace:
    multi-if: true # Enforces newlines (or comments) after every multi-line if statement
    multi-func: true # Enforces newlines (or comments) after every multi-line function signature

  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for
    # documentation of available settings. These are the defaults for
    # `golangci-lint`.
    allow-assign-and-anything: false
    allow-assign-and-call: false
    allow-cuddle-declarations: false
    allow-multiline-assign: true
    allow-separated-leading-comment: false
    allow-trailing-comment: false
    force-case-trailing-whitespace: 0
    force-err-cuddling: true
    force-short-decl-cuddling: true
    strict-append: true

linters:
  disable-all: true
  enable:
    # Find the whole list here https://golangci-lint.run/usage/linters/
    #
    - deadcode # finds unused code
    - errcheck # checking for unchecked errors in go programs
    - exhaustive # checking for missing cases in switch statements
    - gosimple # linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # finds unused struct fields
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
    - asciicheck # simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose # checks whether HTTP response body is closed successfully
    - durationcheck # check for two durations multiplied together
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # forbids identifiers	by reg exps
    - forcetypeassert # finds forced type assertions
    - gochecknoinits # checks that no init functions are present in Go code
    # - goconst # finds repeated strings that could be replaced by a constant
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gomoddirectives # manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gosec # inspects source code for security problems
    - importas # enforces consistent import aliases
    - makezero # finds slice declarations with non-zero initial length
    - misspell # finds commonly misspelled English words in comments
    - nakedret # finds naked returns in functions greater than a specified function length
    - nilerr # finds the code that returns nil even if it checks that the error is not nil.
    - noctx # noctx finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - prealloc # finds slice declarations that could potentially be preallocated
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed.
    - unconvert # Remove unnecessary type conversions
    - unparam # reports unused function parameters
    - wastedassign # wastedassign finds wasted assignment statements.
    - whitespace # tool for detection of leading and trailing whitespace

    # coming soon in golangci-lint
    # - tagliatelle	# checks the struct tags.

    # enable below later, too many stylistic changes
    # - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - stylecheck # a replacement for golint
    # - wsl # whitespace Linter - Forces you to use empty lines!
    # - lll # Reports long lines
    # - dupl # tool for code clone detection
    # - godox # tool for detection of FIXME, TODO and other comment keywords

issues:
  exclude:
    - "G306: Expect WriteFile permissions to be 0600 or less"
