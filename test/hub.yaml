openapi: 3.0.0

info:
  description: This service handles all the Hub management operations via HTTP endpoints
  version: 0.1.0
  title: Hub Service
  contact:
    email: developer@contiamo.com

tags:
  - name: access requests
    description: Endpoints for managing access requests
  - name: apis
    description: Endpoints for managing API resources
  - name: applications
    description: Endpoints for managing application resources
  - name: bi reports
    description: Endpoints for managing bi report resources
  - name: columns
    description: Endpoints for managing table columns
  - name: connections
    description: Endpoints for managing connections for data sources
  - name: data helpers
    description: Endpoints that provide automatic analysis on data sets
  - name: data sources
    description: A physical db (external or managed) or a virtualized db
  - name: fields
    description: Endpoints for managing the catalog structure
  - name: files
    description: Endpoints for file uploads
  - name: glossary items
    description: Endpoints for glossary item management
  - name: links
    description: Endpoints for link management
  - name: models
    description: Endpoints for managing model resources
  - name: ops
    description: Operational endpoints used for internal purposes
  - name: permissions
    description: Endpoints for managing permissions
  - name: pipelines
    description: Endpoints for managing pipeline resources
  - name: queries
    description: Endpoints related to the data source querying
  - name: relations
    description: Endpoints for managing relations between resources
  - name: resources
    description: Endpoints for managing generic resources of the catalog
  - name: search
    description: Search-related endpoints
  - name: streams
    description: Endpoints for stream management
  - name: tables
    description: Endpoints for managing data source tables
  - name: tasks
    description: Endpoints for managing tasks like data ingestion
  - name: use cases
    description: Endpoints for managing use case resources


security:
  - tokenAuth: []
  - doubleCookieAuth: []
    doubleCookieHeader: []

paths:
  "/internal/api/health":
    get:
      tags:
        - ops
      summary: Health Check
      description: Returns "ok!" message when the service is running
      x-handler-group: Ops
      operationId: HealthCheck
      responses:
        '200':
          description: Successfully listed
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/internal/api/v1/datasources/connection-details":
    get:
      tags:
        - connections
      description: |
        Returns connection parameters for data sources, including sensitive data.
        Since only external data sources have connections this list will contain only external data sources.
      x-handler-group: DataSources
      operationId: ListFullDataSourceConnections
      parameters:
        - name: technology
          in: query
          description: Filter by data source technology
          example: ?technology=postgresql&technology=redshift
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DataSourceTechnology"
      responses:
        '200':
          description: Successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullConnectionsListResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  "/internal/api/v1/{projectId}/datasources/{dataSourceId}/auth":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source to check permissions against
        required: true
        schema:
          type: string
          minLength: 2
          maxLength: 63
    post:
      tags:
        - data sources
      summary: Authenticate credentials for access
      description: |
        Authenticate credentials and check if the given credentials have the query permission for the given data source
      x-handler-group: DataSources
      operationId: AuthenticateDataSourceAccess
      requestBody:
        required: true
        description: Authentication request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalAuthenticationRequest"
      responses:
        '200':
          description: Credentials are valid and have required permissions, the request is authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalAuthenticationResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        "422":
          description: Some of the request parameters are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        '500':
          $ref: '#/components/responses/ServerError'

  "/internal/api/v1/{projectId}/datasources/{dataSourceId}/query-access":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source to check access for.
        required: true
        schema:
          type: string
          minLength: 2
          maxLength: 63
      - name: connectionName
        in: query
        description: If set the endpoint will also check if the user is able to use the given connection.
        schema:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^([a-zA-z_]+[a-z0-9_]*){2}$

    get:
      tags:
        - data sources
      summary: Check query access to the data source for the current user session
      description: |
        This endpoint checks whether the given session has assigned query access to the data source and if so, returns
        the connection information for the user.
        If there is a given connection name it will also validate that the given connection is assigned to the user or to a group
        the user belongs to.
        This endpoint is expected to be called with the user's JWT token passed from the initial HTTP request.
      x-handler-group: DataSources
      operationId: CheckDataSourceQueryAccess
      responses:
        '200':
          description: Current user session has query access to the data source.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalAuthenticationResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        "422":
          description: Some of the request parameters are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/profile/sql":
    post:
      tags:
        - data helpers
      summary: Retrieve a data profile
      x-handler-group: Profiler
      operationId: ProfileSQL
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: SQL query to profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileRequest"
      responses:
        '200':
          description: Successfully listed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponse"
        "401":
          description: User unauthorized
        "422":
          description: SQL parsing error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "403":
          description: User forbidden
        "404":
          description: Project not found
        "500":
          description: Internal server error

  "/api/v1/{projectId}/profile/gap-detection":
    post:
      tags:
        - data helpers
      summary: Detect gaps in event data
      x-handler-group: Profiler
      operationId: GapDetection
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Gap detection request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GapDetectionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GapDetectionResponse"

  "/api/v1/{projectId}/profile/entity-detection":
    post:
      tags:
        - data helpers
      x-handler-group: Profiler
      summary: Detect entities in data
      operationId: RunEntityDetection
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Entity detection request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityDetectionRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityDetectionResponse"

  "/api/v1/{projectId}/profile/entity-metadata":
    get:
      tags:
        - data helpers
      x-handler-group: Profiler
      summary: Metadata for entity detection
      operationId: GetEntityMetadata
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Supported entities by language
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string

  "/api/v1/{projectId}/query":
    post:
      x-handler-group: Queries
      operationId: "Query"
      summary: Run a SQL query within the current project
      description: |
        Run a SQL query within the current project.

        The results have a maximum limit set by the 'pantheon.catalogQueryHardLimit' config parameter.
      tags:
        - queries
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: SQL result rows limit
          required: false
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRequest"
        description: SQL query to execute within the scope of the current project
        required: true
      responses:
        '200':
          description: Success, SQL rows response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/queryHistory":
    get:
      x-handler-group: Queries
      operationId: "ListQueryHistory"
      summary: List the query history
      tags:
        - queries
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          description: The current set of paged results to display, based on a 1-based array index
          in: query
          required: false
          schema:
            type: integer
        - name: pageSize
          description: Maximum items to return in the response per page, default = 100
          in: query
          required: false
          schema:
            type: integer
        - name: customRefPattern
          in: query
          description: Custom SQL correlation reference
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "query logs"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedQueryHistoryResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/queryHistory/{queryId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: queryId
        in: path
        description: UUID of the specific query
        required: true
        schema:
          type: string
          format: uuid
    delete:
      x-handler-group: Queries
      operationId: "StopRunningQuery"
      summary: "Stop running query"
      tags:
        - queries
      responses:
        '200':
          description: "query successfully stopped"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      x-handler-group: Queries
      operationId: GetQueryHistory
      summary: "Retrieve a history entry"
      tags:
        - queries
      responses:
        '200':
          description: "A single history entry"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryHistoryResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/queryHistory/{queryId}/result/{format}":
    get:
      summary: Execute of a query from the query history and get the result as a file.
      tags:
        - queries
      operationId: GetResultAsFile
      x-handler-group: Queries
      parameters:
        - in: path
          name: projectId
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: queryId
          description: UUID of the specific query
          required: true
          schema:
              type: string
              format: uuid
        - in: path
          name: format
          description: File format
          required: true
          schema:
            $ref: '#/components/schemas/QueryFileFormat'

      responses:
        '200':
          description: Success
          headers:
            Content-Disposition:
              schema:
                description: Content as attachment.
                type: string
            filename:
              schema:
                description: Name of the file.
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  "/api/v2/{projectId}/fields":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - fields
      summary: List the available custom Fields
      x-handler-group: FieldsV2
      operationId: ListCustomFields
      parameters:
        - name: search
          description: Search fields by name and descirption
          in: query
          schema:
            type: string
        - name: unassigned
          description: Filter the response to only those unassigned for the named kind
          in: query
          schema:
            $ref: "#/components/schemas/ResourceKind"
        - name: page
          description: The current set of paged results to display, based on a 1-based array index
          in: query
          required: false
          schema:
            type: integer
        - name: pageSize
          description: Maximum items to return in the response per page, default = 100
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Here are the fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedCustomFieldResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - fields
      summary: Create new custom Field
      x-handler-group: FieldsV2
      operationId: CreateCustomField
      requestBody:
        description: The fields spec to set
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomFieldRequest"
      responses:
        '201':
          description: Successfully create the Field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldSpec"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v2/{projectId}/fields/{fieldName}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: fieldName
        in: path
        description: Name of the field
        required: true
        schema:
          type: string
    patch:
      tags:
        - fields
      summary: Update a field
      x-handler-group: FieldsV2
      operationId: UpdateCustomField
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCustomFieldRequest"
      responses:
        '200':
          description: Field successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldSpec"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - fields
      summary: Delete a field
      x-handler-group: FieldsV2
      operationId: DeleteCustomField
      responses:
        '204':
          description: Field successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v2/{projectId}/field-sets":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: category
        description: The category is a predefined collection of `kinds` that are used to filter search results, must be set if `kinds` is omitted or empty
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/SearchCategory"
      - name: kinds
        description: A specific list of Resource kinds. Must be set if `category` is empty or omitted.
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/ResourceKind"
    get:
      tags:
        - fields
      summary: Get combined/merged fields-set
      description: |
        This returns the merged field-set for a list of resource kinds
      x-handler-group: FieldsV2
      operationId: GetMergedFieldSets
      responses:
        '200':
          description: Here are the fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldsResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v2/{projectId}/field-sets/{resourceKind}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceKind
        in: path
        description: Identifier of the entity class
        required: true
        schema:
          $ref: "#/components/schemas/ResourceKind"
    get:
      tags:
        - fields
      summary: Get Current Fields Spec
      description: |
        This returns the fields spec for the specified entity type.
      x-handler-group: FieldsV2
      operationId: GetFieldSet
      responses:
        '200':
          description: Here are the fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldsResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - fields
      summary: Update the current field spec assignments or order
      description: |
        This updates the fields spec used to validate catalog entries, use this to assign or unassign
        custom fields to the FieldSet. You can also use this to reoder the custom fields.
      x-handler-group: FieldsV2
      operationId: UpdateFieldSet
      requestBody:
        description: The fields spec to set
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFieldSetRequest"
      responses:
        '204':
          description: Successfully updated the schema
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/fields/{entityClassId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: entityClassId
        in: path
        description: Identifier of the entity class
        required: true
        schema:
          $ref: "#/components/schemas/ResourceKind"
    get:
      tags:
        - fields
      summary: Get Current Fields Spec
      description: |
        This returns the fields spec for the specified entity type.
      x-handler-group: Fields
      operationId: GetFields
      responses:
        '200':
          description: Here are the fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldsResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - fields
      summary: Update the current field spec
      description: |
        This updates the fields spec used to validate catalog entries
      x-handler-group: Fields
      operationId: UpdateFields
      requestBody:
        description: The fields spec to set
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFieldsRequest"
      responses:
        '204':
          description: Successfully updated the schema
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/use-cases":
    post:
      tags:
        - use cases
      summary: Create a use case
      description: |
        This creates a new use case
      x-handler-group: UseCases
      operationId: CreateUseCase
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UseCaseCreateRequest"
        description: Use case to create
        required: true
      responses:
        '201':
          description: Use case created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCaseResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/use-cases/{useCaseId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: useCaseId
        in: path
        description: UUID or name of the use case
        required: true
        schema:
          type: string
    get:
      tags:
        - use cases
      summary: Retrieve a use case
      description: Retrieve a single use case by ID or name
      x-handler-group: UseCases
      operationId: GetUseCase
      responses:
        '200':
          description: Object containing the requested use case information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCaseInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - use cases
      summary: Delete a use case
      description: Delete a single use case by ID or name
      x-handler-group: UseCases
      operationId: DeleteUseCase
      responses:
        '204':
          description: Use case successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - use cases
      summary: Update a use case
      description: Update a use case using a partial PATCH technique
      x-handler-group: UseCases
      operationId: UpdateUseCase
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UseCaseUpdateRequest"
      responses:
        '200':
          description: Object containing the requested use case information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UseCaseInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/bi-reports":
    post:
      tags:
        - bi reports
      summary: Create a BI Report
      description: |
        This creates a new BI Report
      x-handler-group: BIReport
      operationId: CreateBIReport
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BIReportCreateRequest"
        description: BI Report to create
        required: true
      responses:
        '201':
          description: BI Report created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BIReportResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/bi-reports/{biReportId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: biReportId
        in: path
        description: UUID or name of the BI Report
        required: true
        schema:
          type: string
    get:
      tags:
        - bi reports
      summary: Retrieve a BI Report
      description: Retrieve a single BI Report by ID or name
      x-handler-group: BIReport
      operationId: GetBIReport
      responses:
        '200':
          description: Object containing the requested BI Report information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BIReportInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - bi reports
      summary: Delete a BI Report
      description: Delete a single BI Report by ID or name
      x-handler-group: BIReport
      operationId: DeleteBIReport
      responses:
        '204':
          description: BI Report successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - bi reports
      summary: Update a BI Report
      description: Update a BI Report using a partial PATCH technique
      x-handler-group: BIReport
      operationId: UpdateBIReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BIReportUpdateRequest"
      responses:
        '200':
          description: Object containing the requested BI Report information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BIReportInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/glossary-items":
    post:
      tags:
        - glossary items
      summary: Create a glossary item
      description: |
        This creates a new glossary item
      x-handler-group: GlossaryItem
      operationId: CreateGlossaryItem
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlossaryItemCreateRequest"
        description: Glossary item to create
        required: true
      responses:
        '201':
          description: Glossary item successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlossaryItemResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/glossary-items/tree":
    get:
      tags:
        - glossary items
      summary: Returns the entire glossary tree
      description: |
        This returns the glossary tree.
      x-handler-group: GlossaryItem
      operationId: GetGlossaryTree
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The full glossary tree for this project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlossaryTreeResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  "/api/v1/{projectId}/glossary-items/{glossaryItemId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: glossaryItemId
        in: path
        description: UUID or name of the glossary item
        required: true
        schema:
          type: string
    get:
      tags:
        - glossary items
      summary: Retrieve a glossary item
      description: Retrieve a single glossary item by ID or name
      x-handler-group: GlossaryItem
      operationId: GetGlossaryItem
      responses:
        '200':
          description: Object containing the requested glossary item information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlossaryItemInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - glossary items
      summary: Delete a glossary item
      description: Delete a single glossary item by ID or name
      x-handler-group: GlossaryItem
      operationId: DeleteGlossaryItem
      responses:
        '204':
          description: Glossary item successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - glossary items
      summary: Update a glossary item
      description: Update a glossary item using a partial PATCH technique
      x-handler-group: GlossaryItem
      operationId: UpdateGlossaryItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GlossaryItemUpdateRequest"
      responses:
        '200':
          description: Object containing the updated glossary item information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlossaryItemInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/applications":
    post:
      tags:
        - applications
      summary: Create an application
      description: |
        This creates a new application resource
      x-handler-group: Applications
      operationId: CreateApplication
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCreateRequest"
        description: Application to create
        required: true
      responses:
        '201':
          description: Application created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/applications/{applicationId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: applicationId
        in: path
        description: UUID or name of the application
        required: true
        schema:
          type: string
    get:
      tags:
        - applications
      summary: Retrieve an application
      description: Retrieve a single application by ID or name
      x-handler-group: Applications
      operationId: GetApplication
      responses:
        '200':
          description: Object containing the requested application information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - applications
      summary: Delete an application
      description: Delete a single application by ID or name
      x-handler-group: Applications
      operationId: DeleteApplication
      responses:
        '204':
          description: Application successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - applications
      summary: Update an application
      description: Update an application using a partial PATCH technique
      x-handler-group: Applications
      operationId: UpdateApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpdateRequest"
      responses:
        '200':
          description: Object containing the requested use case information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'



  "/api/v1/{projectId}/streams":
    post:
      tags:
        - streams
      summary: Create a stream
      description: |
        This creates a new stream resource
      x-handler-group: Streams
      operationId: CreateStream
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamCreateRequest"
        description: Stream to create
        required: true
      responses:
        '201':
          description: Stream created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/streams/{streamId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: streamId
        in: path
        description: UUID or name of the stream
        required: true
        schema:
          type: string
    get:
      tags:
        - streams
      summary: Retrieve a stream
      description: Retrieve a single stream by ID or name
      x-handler-group: Streams
      operationId: GetStream
      responses:
        '200':
          description: Object containing the requested stream information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - streams
      summary: Delete an stream
      description: Delete a single stream by ID or name
      x-handler-group: Streams
      operationId: DeleteStream
      responses:
        '204':
          description: Stream successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - streams
      summary: Update a stream
      description: Update an stream using a partial PATCH technique
      x-handler-group: Streams
      operationId: UpdateStream
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StreamUpdateRequest"
      responses:
        '200':
          description: Object containing the requested stream information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/pipelines":
    post:
      tags:
        - pipelines
      summary: Create a pipeline
      description: |
        This creates a new pipeline resource
      x-handler-group: Pipelines
      operationId: CreatePipeline
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineCreateRequest"
        description: pipeline to create
        required: true
      responses:
        '201':
          description: Pipeline created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/pipelines/{pipelineId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: pipelineId
        in: path
        description: UUID or name of the pipeline
        required: true
        schema:
          type: string
    get:
      tags:
        - pipelines
      summary: Retrieve a pipeline
      description: Retrieve a single pipeline by ID or name
      x-handler-group: Pipelines
      operationId: GetPipeline
      responses:
        '200':
          description: Object containing the requested pipeline information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - pipelines
      summary: Delete a pipeline
      description: Delete a single pipeline by ID or name
      x-handler-group: Pipelines
      operationId: DeletePipeline
      responses:
        '204':
          description: Pipeline successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - pipelines
      summary: Update a pipeline
      description: Update a pipeline using a partial PATCH technique
      x-handler-group: Pipelines
      operationId: UpdatePipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PipelineUpdateRequest"
      responses:
        '200':
          description: Object containing the requested resource information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/apis":
    post:
      tags:
        - apis
      summary: Create an API
      description: |
        This creates a new API resource
      x-handler-group: APIs
      operationId: CreateAPI
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APICreateRequest"
        description: API to create
        required: true
      responses:
        '201':
          description: API created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/apis/{apiId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: apiId
        in: path
        description: UUID or name of the API
        required: true
        schema:
          type: string
    get:
      tags:
        - apis
      summary: Retrieve an API
      description: Retrieve a single API by ID or name
      x-handler-group: APIs
      operationId: GetAPI
      responses:
        '200':
          description: Object containing the requested API information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - apis
      summary: Delete an API
      description: Delete a single API by ID or name
      x-handler-group: APIs
      operationId: DeleteAPI
      responses:
        '204':
          description: API successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - apis
      summary: Update an API
      description: Update an API using a partial PATCH technique
      x-handler-group: APIs
      operationId: UpdateAPI
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIUpdateRequest"
      responses:
        '200':
          description: Object containing the requested API information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/models":
    post:
      tags:
        - models
      summary: Create a model
      description: |
        This creates a new model resource
      x-handler-group: Models
      operationId: CreateModel
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelCreateRequest"
        description: Model to create
        required: true
      responses:
        '201':
          description: Model created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/models/{modelId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: modelId
        in: path
        description: UUID or name of the model
        required: true
        schema:
          type: string
    get:
      tags:
        - models
      summary: Retrieve a model
      description: Retrieve a single model by ID or name
      x-handler-group: Models
      operationId: GetModel
      responses:
        '200':
          description: Object containing the requested model information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - models
      summary: Delete a model
      description: Delete a single model by ID or name
      x-handler-group: Models
      operationId: DeleteModel
      responses:
        '204':
          description: Model successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - models
      summary: Update a model
      description: Update a model using a partial PATCH technique
      x-handler-group: Models
      operationId: UpdateModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelUpdateRequest"
      responses:
        '200':
          description: Object containing the requested model information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/permissions":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve a list of all permissions for the resource
      x-handler-group: Resources
      operationId: ListPermissions
      tags:
        - resources
        - permissions
      responses:
        '200':
          description: Array containing permissions assigned to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionList"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Assign a new permission
      x-handler-group: Resources
      operationId: AssignPermission
      tags:
        - resources
        - permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignPermissionRequest"
      responses:
        '201':
          description: Object containing the created permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionList"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/requests":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        description: The current set of paged results to display, based on a 1-based array index
        in: query
        required: false
        schema:
          type: integer
      - name: pageSize
        description: Maximum items to return in the response per page, default = 100
        in: query
        required: false
        schema:
          type: integer
      - name: requesterId
        description: Requester is a user who requested access, setting this value will filter the list by the given user.
        in: query
        required: false
        schema:
          type: string
      - name: state
        description: Filter by the current state of the request, for instance to display a list of pending requests only.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccessRequestState'

    get:
      summary: Retrieve a list of all access requests for the resource
      x-handler-group: Resources
      operationId: ListAccessRequests
      tags:
        - resources
        - access requests
      responses:
        '200':
          description: |
            Array containing access requests assigned to the resource.
            Owners will see a list of pending requests, normal users will see their requests.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRequestList"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new access request
      x-handler-group: Resources
      operationId: CreateAccessRequest
      tags:
        - resources
        - access requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccessRequestRequest"
      responses:
        '201':
          description: Object containing the created access request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRequestResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/requests/{requestId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
      - name: requestId
        in: path
        description: UUID of the request
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a specific request
      x-handler-group: Resources
      operationId: GetAccessRequest
      tags:
        - resources
        - access requests
      responses:
        '200':
          description: Requested access request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRequestResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Mark the access request as granted or rejected.
      x-handler-group: Resources
      operationId: ResolveAccessRequest
      tags:
        - resources
        - access requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResolveAccessRequestRequest"
      responses:
        '200':
          description: Updated access request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessRequestResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/stats":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve various statistics about resources in the given project
      x-handler-group: Resources
      operationId: GetProjectResourceStats
      tags:
        - resources
      responses:
        '200':
          description: |
            Statistics object for resources in the given project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResourceStatistics"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/links":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve a list of links
      x-handler-group: Resources
      operationId: ListLinks
      tags:
        - resources
        - links
      parameters:
      - name: page
        description: The current set of paged results to display, based on a 1-based array index
        in: query
        required: false
        schema:
          type: integer
      - name: pageSize
        description: Maximum items to return in the response per page, default = 100
        in: query
        required: false
        schema:
          type: integer
      - name: sourceId
        in: query
        description: Filter results by source id
        required: false
        schema:
          type: string
          format: uuid
      - name: targetId
        in: query
        description: Filter results by target id
        required: false
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: query
        description: Filter results by a resource, regardless wether they are source or target
        required: false
        schema:
          type: string
          format: uuid
      - name: sourceParentId
        description: Filter results by source parent id, that means that it will give you all the links for all the columns of one specific table for example.
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: type
        description: Filter results by link type
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/LinkType"
      - name: order
        description: ordering instructions
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/LinkListOrder"
      responses:
        '200':
          description: |
            Array containing links assigned to the resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkList"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new link
      x-handler-group: Resources
      operationId: CreateLink
      tags:
        - resources
        - links
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLinkRequest"
      responses:
        '201':
          description: Object containing the created link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/links/{linkId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: linkId
        in: path
        description: UUID of the link
        required: true
        schema:
          type: string
          format: uuid
    delete:
      summary: Delete a link by a given ID
      x-handler-group: Resources
      operationId: DeleteLink
      tags:
        - resources
        - links
      responses:
        '204':
          description: Successfully deleted link
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/search":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: parentId
        in: query
        description: |
          UUID of the parent resource. All responses will be children  of this resource.
        required: false
        schema:
          type: string
          format: uuid
      - name: page
        description: The current set of paged results to display, based on a 1-based array index
        in: query
        required: false
        schema:
          type: integer
      - name: pageSize
        description: Maximum items to return in the response per page, default = 100
        in: query
        required: false
        schema:
          type: integer
      - name: query
        description: Search query string
        in: query
        required: false
        schema:
          type: string
      - name: filters
        description: The filters object is a json serialized string from FilterSet
        in: query
        required: false
        schema:
          type: string
        example:
          {
            "filters": [{"property": "category", "operation": "eq", "value": "cat1"}],
          }
      - name: category
        description: The category is a predefined collection of `kinds` that are used to filter search results
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/SearchCategory"
      - name: kinds
        description: List of kinds to include in the search results. The parameter `category` may be used to specify predefined kind sets.
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/ResourceKind"
      - name: nested
        description: Return results with child resources nested starting with the kinds provided as input at the top level.
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/ResourceKind"
      - name: omitFieldSpecs
        description: Omit the field specs in the result
        in: query
        required: false
        schema:
          type: boolean
      - name: myResources
        description: Only return resources where the user has any role assigned on
        in: query
        required: false
        schema:
          type: boolean
      - name: order
        description: ordering instructions, by default the result is ordered by relevance
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/SearchOrder"
      - name: linkFilterSourceIds
        description: list of UUIDs representing the sourceId of the links that have to exist to get a match
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: linkFilterTargetIds
        description: list of UUIDs representing the targetId of the links that have to exist to get a match
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: linkFilterResourceIds
        description: list of UUIDs representing the targetId or sourceId of the links that have to exist to get a match
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: linkFilterType
        description: the type of the link that have to exist to get a match
        in: query
        required: false
        schema:
          $ref: "#/components/schemas/LinkType"
      - name: linkFilterIncludeChildren
        description: if true, also match if the resource is linked to or from a direct or indirect child of the specified source or target resources
        in: query
        required: false
        schema:
          type: boolean

    get:
      summary: search for resources
      x-handler-group: Resources
      operationId: SearchResources
      tags:
        - resources
      description: |
        List, search and filter resources of any kind
      responses:
        '200':
          description: Object containing the requested permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedSearchResponseV2"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/resolve":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceIds
        description: List of resource ids to include in the search results.
        in: query
        required: false
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
    post:
      summary: resolve a list of resource ids
      x-handler-group: Resources
      operationId: ResolveResources
      tags:
        - resources
      description: |
        resolve a list of resource ids of any kind
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceIdList'
      responses:
        '200':
          description: Object containing the resources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedSearchResponseV2"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/dump":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
      - name: includeOrphans
        in: query
        description: |
          Indicates that the dump should also include orphaned resources. By default they are omitted.
        required: false
        schema:
          type: boolean
    get:
      summary: Dump entire resource metadata with its children, by ID
      x-handler-group: Resources
      operationId: GetResourceDump
      tags:
        - resources
      responses:
        '200':
          description: Object containing dump entire resource metadata with its children, by IDP.


            Note that this response type is not as strictly typed like the search response or the data
            source endpoints (etc). This is a done as a performance improvement while generating the
            dump, by having a single consistent type, the serialization process is _much_ faster.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDumpResponseBody"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/permissions/{permissionId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
      - name: permissionId
        in: path
        description: UUID of the permission
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get permission by its ID
      x-handler-group: Resources
      operationId: GetPermission
      tags:
        - resources
        - permissions
      description: |
        Retrieve the permissions, assigned to any principle, for the specified
        resource.
        This endpoint can be used to display which principles (users, groups,
        etc)
        have been given access to this resource. The display information for each
        principle
        must be retrieved from the identity provider separately.
      responses:
        '200':
          description: Object containing the requested permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Permission"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete permission by its ID
      x-handler-group: Resources
      operationId: DeletePermission
      tags:
        - resources
        - permissions
      responses:
        '204':
          description: The permission was successfully deleted
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an existing permission
      x-handler-group: Resources
      operationId: UpdatePermission
      tags:
        - resources
        - permissions
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePermissionRequest"
      responses:
        '200':
            description: Object containing the updated permission
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Permission"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/relations":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve a list of all relations of the resource
      x-handler-group: Resources
      operationId: ListRelations
      tags:
        - resources
        - relations
      responses:
        '200':
          description: Array containing relations assigned to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationList"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/resources/{resourceId}/dependencies/{dependencyId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: resourceId
        in: path
        description: |
          UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
        required: true
        schema:
          type: string
          format: uuid
      - name: dependencyId
        in: path
        description: UUID of the relation the resource depends on
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Set a new dependency relation
      x-handler-group: Resources
      operationId: SetDependency
      tags:
        - resources
        - relations
      responses:
        '204':
          description: Dependency set successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete dependency relation by its ID
      x-handler-group: Resources
      operationId: DeleteDependency
      tags:
        - resources
        - relations
      responses:
        '204':
          description: The dependency relation was successfully deleted
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources":
    post:
      tags:
        - data sources
      summary: Create a data source
      description: |
        This creates a new datasource
      x-handler-group: DataSources
      operationId: CreateDataSource
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceCreateRequest"
        description: Data source to create
        required: true
      responses:
        '201':
          description: Data source created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceResponse"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/dataSourceProducts/{name}/testConnection":
    parameters:
      - name: name
        in: path
        description: Data source product type name
        required: true
        schema:
          type: string
    post:
      summary: Test connection parameters
      x-handler-group: DataSources
      operationId: TestDataSourceConnection
      tags:
        - data sources
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionTestWithStatsResult"
          description: we successfully connected to the data source
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
    get:
      tags:
        - data sources
      summary: Retrieve a data source
      description: Retrieve a single data source by ID or name
      x-handler-group: DataSources
      operationId: GetDataSource
      responses:
        '200':
          description: Object containing the requested data source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - data sources
      summary: Delete a data source
      description: Retrieve a single data source by ID or name
      x-handler-group: DataSources
      operationId: DeleteDataSource
      responses:
        '204':
          description: Data source successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - data sources
      summary: Update a data source
      description: Update a data source using a partial PATCH technique
      x-handler-group: DataSources
      operationId: UpdateDataSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSourceUpdateRequest"
      responses:
        '200':
          description: Object containing the requested data source information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/refresh":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
    post:
      tags:
        - data sources
      summary: refresh data source schema
      description: |
        Trigger a schema refresh, syncing the current table and column structure that is
        accessible via the Pantheon query engine
      x-handler-group: DataSources
      operationId: RefreshDataSource
      responses:
        '200':
          description: Refresh task is already in progress
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceInstanceResponse"
        '202':
          description: Refresh task enqueued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSourceInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
        '501':
          description: Data source type does not currently support refresh

  "/api/v1/{projectId}/datasources/{dataSourceId}/tables/{tableId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
      - name: tableId
        in: path
        description: UUID or name of the table
        required: true
        schema:
          type: string
    get:
      tags:
        - data sources
        - tables
      summary: Get a table
      description: Retrieve a table for a data source by its UUID or name
      x-handler-group: Tables
      operationId: GetTable
      responses:
        '200':
          description: Object containing the requested table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a table
      x-handler-group: Tables
      operationId: DeleteTable
      description: |
        Deletes a manageable table.
      tags:
        - data sources
        - tables
      responses:
        '204':
          description: Table successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - data sources
        - tables
      summary: Update table metadata
      x-handler-group: Tables
      operationId: UpdateTable
      description: |
        Update the table metadata, including name, description, or custom properties.

        This endpoint is intended to be used by data source Stewards and Owners in the
        data catalog.

        Changes to the table name will be immediately available in the Pantheon query engine.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableUpdateRequest"
      responses:
        '200':
          description: Object containing the requested table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/tables/{tableId}/truncate":
    post:
      tags:
        - tables
      summary: Truncate a table in a managed data source
      description: Removes all data from within a table
      x-handler-group: ProxiedTables
      operationId: TruncateManagedTable
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the managed data source
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          description: UUID or name of the managed table
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The table was successfully truncated
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Managed data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/tables/{tableId}/profile":
    post:
      tags:
        - tables
      summary: Start a new profiling session
      description: Schedules a new profiling job for the given table. Use the GET request on this endpoint to get the current profiling results.
      x-handler-group: Tables
      operationId: ProfileTable
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the data source
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          description: UUID or name of the table
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Request that contains profiling parameters for calculating the table stats.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableProfileRequest"
      responses:
        '204':
          description: The profiling job was successfully scheduled
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: The table was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
    get:
      tags:
        - tables
      summary: Get the last profiling session
      description: Gets the results of a last profiling job for the given table. Returns 404 if a profiling session for given parameters was never started. Returns 200 if the current session is in progress or finished. Although the response is 200, it does not guarantee the presense of the profiling results, inspect the `progress` object and see the `finishedAt` field.
      x-handler-group: Tables
      operationId: GetTableProfile
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the data source
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          description: UUID or name of the table
          required: true
          schema:
            type: string
        - name: sampleSize
          in: query
          description: Number of rows used for the profile. Should match the `sampleSize` used to create the profile.
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableProfileResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Table profile has not been created for the given parameters yet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/tables/{tableId}/entity-detection":
    post:
      tags:
        - tables
      summary: Start a new entity detection session
      description: Schedules a new entity detection job for the given table. Use the GET request on this endpoint to get the current entity detection results.
      x-handler-group: Tables
      operationId: DetectTableEntities
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the data source
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          description: UUID or name of the table
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Request that contains entity detection parameters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TableEntityDetectionRequest"
      responses:
        '204':
          description: The entity detection job was successfully scheduled
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: The table was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
    get:
      tags:
        - tables
      summary: Get the last entity detection session results
      description: Gets the results of a last entity detection job for the given table. Returns 404 if a entity detection session for given parameters was never started. Returns 200 if the current session is in progress or finished. Although the response is 200, it does not guarantee the presense of the entity detection results, inspect the `progress` object and see the `finishedAt` field.
      x-handler-group: Tables
      operationId: GetTableEntities
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the data source
          required: true
          schema:
            type: string
        - name: tableId
          in: path
          description: UUID or name of the table
          required: true
          schema:
            type: string
        - name: sampleSize
          in: query
          description: Number of rows used for the session. Should match the `sampleSize` used to create the session.
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableEntityDetectionResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Table entity detection session has not been created for the given parameters yet
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"


  "/api/v1/{projectId}/datasources/{dataSourceId}/tables/{tableId}/columns/{columnId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
      - name: tableId
        in: path
        description: UUID or name of the table
        required: true
        schema:
          type: string
      - name: columnId
        in: path
        description: UUID or name of the column
        required: true
        schema:
          type: string
    get:
      tags:
        - data sources
        - tables
        - columns
      summary: Get column metadata
      x-handler-group: Tables
      operationId: GetColumn
      description: |
        Get the table column metadata by its name or UUID.
      responses:
        '200':
          description: Object containing the requested column
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      tags:
        - data sources
        - tables
        - columns
      summary: Update column metadata
      x-handler-group: Tables
      operationId: UpdateColumn
      description: |
        Update the table column metadata, including description and/or custom properties.

        This endpoint is intended to be used by data source Stewards and Owners in the
        data catalog.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColumnUpdateRequest"
      responses:
        '200':
          description: Object containing the requested column
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ColumnInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/views":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
    post:
      summary: Create new view table
      x-handler-group: Tables
      operationId: CreateView
      description: |
        Defines a new View table in a VirtualDB data source. The view definition will immediately be updated in the Pantheon query engine.

        _Special Notes_

        * Views may only be created within VirtualDBs, otherwise a validation error is returned.

        * This endpoint is used from the Workbench.
      tags:
        - data sources
        - tables
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/CreateViewRequest"
      responses:
        '200':
          description: Object containing the requested view table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/views/{viewId}/tasks":
    get:
      tags:
        - data sources
        - tables
      summary: List materialization tasks
      description: List all tasks corresponding to the materialization ID
      x-handler-group: ProxiedTasks
      operationId: ListMaterializationTasks
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the data source
          required: true
          schema:
            type: string
        - name: viewId
          in: path
          description: UUID of the materialized view
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          description: The current set of paged results to display, based on a 1-based array index
          in: query
          required: false
          schema:
            type: integer
        - name: pageSize
          description: Maximum items to return in the response per page, default = 100
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedMaterializationTaskResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Materialized view not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "422":
          description: Some of the given parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/managed-tables":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
    post:
      summary: Create new managed table
      x-handler-group: Tables
      operationId: CreateManagedTable
      description: |
        Defines a new managed table in a managed data source. The table definition will immediately be updated in the Pantheon query engine.

        _Special Notes_

        * Managed tables may only be created within a managed data source, otherwise a validation error is returned.

        * This endpoint is used from the Workbench.
      tags:
        - data sources
        - tables
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/CreateManagedTableRequest"
      responses:
        '200':
          description: Object containing the created managed table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/views/{tableId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
      - name: tableId
        in: path
        description: UUID or name of the view table
        required: true
        schema:
          type: string
    get:
      summary: Get table view definition
      x-handler-group: Tables
      operationId: GetViewDefinition
      description: |
        Get the view configuration information. This includes the materialization parameters.
      tags:
        - data sources
        - tables
      responses:
        '200':
          description: The view definition
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewDetailsResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a table view definition
      x-handler-group: Tables
      operationId: UpdateViewDefinition
      description: |
        Updates a View table definition in a VirtualDB data source.

        This view definition will immediately be updated in the Pantheon query engine.
      tags:
        - data sources
        - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateViewRequest"
      responses:
        '200':
          description: Object containing the requested view table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableInstanceResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/uploads":
    post:
      tags:
        - files
        - tables
      summary: Upload a file
      description: Upload a file to a given managed data source
      x-handler-group: ProxiedUploads
      operationId: UploadManagedDataSourceFile
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the managed data source
          required: true
          schema:
            type: string
        - name: disableHeaderDiscovery
          in: query
          description: Disable header discovery on CSV uploads
          schema:
            type: boolean
          required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UploadRequest"
        description: File data
        required: true
      responses:
        '200':
          description: Upload finished
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Managed data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/uploads/{fileId}/discover":
    post:
      tags:
        - files
      summary: Discover a file schema
      description: Parse the given file with the supplied options and return the resulting schema
      x-handler-group: ProxiedUploads
      operationId: DiscoverFileInManagedDataSource
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of a managed data source
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: ID of a previously uploaded file
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 255
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/FileDiscoveryRequest"
        description: File options used when opening and parsing the file
        required: true
      responses:
        '200':
          description: Parsed file schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDiscoveryResponse"
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Managed data source or file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/uploads/{fileId}/preview":
    post:
      tags:
        - files
      summary: Get a preview of the data
      description: This tries to parse a preview of a file with the given file options and schema
      x-handler-group: ProxiedUploads
      operationId: PreviewFileInManagedDataSource
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of a managed data source
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: ID of a previously uploaded file
          required: true
          schema:
            minLength: 2
            maxLength: 255
            type: string
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/FilePreviewRequest"
        description: File options and schema used when opening and parsing the file
        required: true
      responses:
        '200':
          description: Parsed file schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilePreviewResponse"
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Managed data source or file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/connections":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
    get:
      summary: Retrieve a list of all connections of the data source
      x-handler-group: DataSources
      operationId: ListDataSourceConnections
      tags:
        - data sources
        - connections
      responses:
        '200':
          description: Array containing connections assigned to the resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListConnectionsResponse"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new connection for the data source
      description: If you create a new `primary` connection the previous `primary` connection will be switched to `other` since only one `primary` connection can exist for a data source.
      x-handler-group: DataSources
      operationId: CreateDataSourceConnection
      tags:
        - data sources
        - connections
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateConnectionRequest"
      responses:
        '200':
            description: Object containing the created connection
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Connection"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/connections/{connectionId}":
    parameters:
      - name: projectId
        in: path
        description: UUID of the project
        required: true
        schema:
          type: string
          format: uuid
      - name: dataSourceId
        in: path
        description: UUID or name of the data source
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        description: UUID or name of the connection
        required: true
        schema:
          type: string
    get:
      summary: Get connection by its ID
      x-handler-group: DataSources
      operationId: GetDataSourceConnection
      tags:
        - data sources
        - connections
      responses:
        '200':
          description: Object containing the requested connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Partially update an existing connection object
      description: If you update the connection type to `primary` the previous `primary` connection will be switched to `other` since only one `primary` connection can exist for a data source. `properties` are updated in a `patch` mode. If you want to update only one property you don't have to send all the values again. If you want to remove a property send a `null` value for it. Also, most of the properties (except base properties) require to also send a new password/secret value, otherwise you'd get a validation error.
      x-handler-group: DataSources
      operationId: UpdateDataSourceConnection
      tags:
        - data sources
        - connections
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateConnectionRequest"
      responses:
        '200':
            description: Object containing the updated connection
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Connection"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete an existing connection
      x-handler-group: DataSources
      operationId: DeleteDataSourceConnection
      tags:
        - data sources
        - connections
      responses:
        '204':
            description: Connection successfully deleted
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Connection"
        '422':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  "/api/v1/{projectId}/datasources/{dataSourceId}/tasks":
    get:
      tags:
        - data sources
        - tasks
      summary: List ingestion tasks for a managed data source
      description: List the current and past ingestion tasks with a status summary
      x-handler-group: ProxiedTasks
      operationId: ListIngestionTasks
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the managed data source
          required: true
          schema:
            type: string
        - name: page
          description: The current set of paged results to display, based on a 1-based array index
          in: query
          required: false
          schema:
            type: integer
        - name: pageSize
          description: Maximum items to return in the response per page, default = 100
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedTaskResponse"
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
    post:
      tags:
        - data sources
        - tasks
      summary: Ingest a file into a managed table
      description: Parse and ingest a file into an existing managed table
      x-handler-group: ProxiedTasks
      operationId: CreateIngestionTask
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the managed data source
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/FileIngestRequest"
        description: File parsing options and schema
        required: true
      responses:
        '200':
          description: Initial file metadata and ingest task ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

  "/api/v1/{projectId}/datasources/{dataSourceId}/tasks/{taskId}":
    delete:
      tags:
        - data sources
        - tasks
      summary: Cancel file ingestion task
      description: Stop a file ingestion task and mark it as finished
      x-handler-group: ProxiedTasks
      operationId: CancelIngestionTask
      parameters:
        - name: projectId
          in: path
          description: UUID of the project
          required: true
          schema:
            type: string
            format: uuid
        - name: dataSourceId
          in: path
          description: UUID or name of the managed data source
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: UUID of the ingestion task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Task was successfully canceled
        "422":
          description: Some of the give parameters are not correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "401":
          description: User unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "403":
          description: User forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"
        "404":
          description: Managed data source or task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralErrorResponse"

servers:
  - url: http://localhost:{port}/hub
    description: Locally running
    variables:
      port:
        default: "9191"
  - url: https://dev.contiamo.io/{tenantId}/hub
    description: Development environment
    variables:
      tenantId:
        default: demo
  - url: https://stg.contiamo.io/{tenantId}/hub
    description: Staging environment
    variables:
      tenantId:
        default: demo
  - url: https://cloud.contiamo.com/{tenantId}/hub
    description: Production environment
    variables:
      tenantId:
        default: demo

components:
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Personal Access Token or Service Account Token
    doubleCookieAuth:
      type: apiKey
      description: Cookie value set during login, automatically sent by the browser
      name: double-cookie
      in: header
    doubleCookieHeader:
      type: apiKey
      name: X-Double-Cookie
      in: header

  responses:
    ValidationError:
      description: Some of the give parameters are not correct
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FieldErrorResponse"
    Unauthorized:
      description: User unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorResponse"
    Forbidden:
      description: User forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorResponse"
    Conflict:
      description: Request can not be completed due to a conflict with the current state
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorResponse"
    NotFound:
      description: Data source or permission not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorResponse"
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralErrorResponse"

  schemas:
    GeneralErrorResponse:
      description: "General error response that usually has a very generic message"
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/GeneralError"

    FieldErrorResponse:
      description: "Error message that contains detailed information about certain parameters being incorrect"
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldError"

    FieldError:
      type: object
      required:
        - type
        - key
        - message
      properties:
        type:
          $ref: "#/components/schemas/ErrorType"
        message:
          type: string
        key:
          type: string

    GeneralError:
      type: object
      required:
        - type
        - message
      properties:
        type:
          $ref: "#/components/schemas/ErrorType"
        message:
          type: string

    ErrorType:
      type: string
      description: The type of the error response
      enum:
        - GeneralError
        - FieldError

    SearchMode:
      type: string
      description: >
        The search mode to use

        * 'searchCombined' will search for datasources and tables

        * 'searchDatasources' will only search for datasources

        * 'searchTables' will only search for tables
      enum:
        - searchTables
        - searchDatasources
        - searchCombined

    UploadRequest:
      description: File uploaded by the client
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
        tableId:
          type: string
          format: uuid

    UploadResponse:
      type: object
      required:
        - uploadedBytes
        - fileId
        - collectionId
        - schema
        - targetSchema
        - schemaErrors
        - options
        - preview
      properties:
        uploadedBytes:
          type: integer
          format: int64
        fileId:
          type: string
          minLength: 2
          maxLength: 255
        collectionId:
          type: string
          format: uuid
        schema:
          $ref: "#/components/schemas/ManagedTableSchema"
        targetSchema:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ManagedTableSchema"
        schemaErrors:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FieldErrorResponse"
        options:
          $ref: "#/components/schemas/FileOptions"
        preview:
          type: array
          description: FileSchemaPreview provides a preview of how a file will be parsed with a given schema, representing an array of rows of a table
          items:
            type: array
            description: Provides a preview of how a file row will be parsed with a given schema
            items:
              $ref: "#/components/schemas/SchemaPreviewCell"
            example:
              [
                {"name": "timestamp", "value": "2010-04-01T03:30:00Z", "error": ""},
                {"name": "office", "value": "san francisco", "error": "",},
                {"name": "event", "value": "checkin", "error": ""},
                {"name": "days_without_accident", "value": "1", "error": ""}
              ]

    FileDiscoveryResponse:
      type: object
      required:
        - schema
        - targetSchema
        - schemaErrors
        - options
        - preview
      properties:
        schema:
          $ref: "#/components/schemas/ManagedTableSchema"
        targetSchema:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ManagedTableSchema"
        schemaErrors:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FieldErrorResponse"
        options:
          $ref: "#/components/schemas/FileOptions"
        preview:
          type: array
          description: FileSchemaPreview provides a preview of how a file will be parsed with a given schema, representing an array of rows of a table
          items:
            type: array
            description: Provides a preview of how a file row will be parsed with a given schema
            items:
              $ref: "#/components/schemas/SchemaPreviewCell"
            example:
              [
                {"name": "timestamp", "value": "2010-04-01T03:30:00Z", "error": ""},
                {"name": "office", "value": "san francisco", "error": "",},
                {"name": "event", "value": "checkin", "error": ""},
                {"name": "days_without_accident", "value": "1", "error": ""}
              ]

    FilePreviewResponse:
      type: object
      required:
        - preview
      properties:
        preview:
          type: array
          description: FileSchemaPreview provides a preview of how a file will be parsed with a given schema, representing an array of rows of a table
          items:
            type: array
            description: Provides a preview of how a file row will be parsed with a given schema
            items:
              $ref: "#/components/schemas/SchemaPreviewCell"
            example:
              [
                {"name": "timestamp", "value": "2010-04-01T03:30:00Z", "error": ""},
                {"name": "office", "value": "san francisco", "error": "",},
                {"name": "event", "value": "checkin", "error": ""},
                {"name": "days_without_accident", "value": "1", "error": ""}
              ]

    FileDiscoveryRequest:
      type: object
      required:
        - options
      properties:
        options:
          $ref: "#/components/schemas/FileOptions"
        tableId:
          type: string
          format: uuid
          description: Optional ID of the target table

    SchemaPreviewCell:
      type: object
      required:
        - name
        - value
        - error
      description: SchemaPreviewCell represents a specific table cell in a file, it shows how that specific value will be parsed with a given schema
      properties:
        name:
          type: string
        value:
          type: string
        error:
          type: string
      example: {"name": "days_without_accident", "value": "1", "error": ""}

    FilePreviewRequest:
      type: object
      required:
        - schema
        - options
      properties:
        schema:
          $ref: "#/components/schemas/ManagedTableSchema"
        options:
          $ref: "#/components/schemas/FileOptions"

    PermissionList:
      type: array
      description: |
        A list of permissions for a given user and resource.
      items:
        $ref: "#/components/schemas/Permission"

    UpdatePermissionRequest:
      type: object
      required:
        - role
      properties:
        role:
          $ref: "#/components/schemas/Role"
        connectionId:
          type: string
          format: uuid
          description: ID of the connection the beneficiary would use to access the resource if the resource supports connecting to it. This parameter is optional and if not speicified the primary connection will be assigned to the beneficiary.

    AssignPermissionRequest:
      type: object
      required:
        - role
        - principalId
      properties:
        principalId:
          type: string
          format: uuid
          description: ID of the beneficiary of the permission
        role:
          $ref: "#/components/schemas/Role"
        connectionId:
          type: string
          format: uuid
          description: ID of the connection the beneficiary would use to access the resource if the resource supports connecting to it. This parameter is optional and if not speicified the primary connection will be assigned to the beneficiary.

    Permission:
      type: object
      description: |
        A single assignment of a role to a user or group for a specific
        resource.
        Note that this is a sub-resource of a data source so the affected data source is
        implicit and especially its ID is not part of this object.

        The permission matrix is as following:
          | role    | actions                                         |
          |---------|-------------------------------------------------|
          | owner   | read, edit, edit-metadata, delete, grant, query |
          | steward | read, edit-metadata, query                      |
          | query   | read, query                                     |
      required:
        - id
        - principalId
        - role
      properties:
        id:
          type: string
          format: uuid
          description: ID of the permission
        principalId:
          type: string
          format: uuid
          description: ID of the beneficiary of the permission
        role:
          $ref: "#/components/schemas/Role"
        connectionId:
          type: string
          format: uuid
          description: ID of the connection the beneficiary would use to access the resource if the resource supports connecting to it. This parameter is available only for resources that support connections.

    Role:
      type: string
      description: A valid resource role identifier
      enum:
        - owner
        - steward
        - query

    RelationList:
      type: object
      required:
        - dependants
        - dependencies
      description: |
        A list of relations (dependants and dependencies) for a given resource.
      properties:
        dependants:
          type: array
          description: List of resources that depend on the current one
          items:
            $ref: "#/components/schemas/RelationResponse"
        dependencies:
          type: array
          description: List of resources that the current resource depends on
          items:
            $ref: "#/components/schemas/RelationResponse"

    RelationResponse:
      type: object
      required:
        - kind
        - resource
      description: A wrapper type that contains the kind of the resource and the resource itself
      properties:
        kind:
          $ref: "#/components/schemas/ResourceKind"
        resource:
          oneOf:
            - $ref: "#/components/schemas/DataSourceResponse"
            - $ref: "#/components/schemas/TableResponse"
            - $ref: "#/components/schemas/UseCaseResponse"

    ResourceKind:
      type: string
      description: A list of supported resource kinds
      enum:
        - datasource
        - table
        - column
        - usecase
        - bireport
        - glossaryitem
        - application
        - pipeline
        - api
        - model
        - stream

    CreateConnectionRequest:
      type: object
      required:
        - name
        - type
        - properties
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^([a-zA-z_]+[a-z0-9_]*){2}$
        type:
          $ref: "#/components/schemas/ConnectionType"
        properties:
          $ref: "#/components/schemas/ConnectionProperties"

    UpdateConnectionRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^([a-zA-z_]+[a-z0-9_]*){2}$
          nullable: true
        description:
          type: string
          nullable: true
          maxLength: 255
        type:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConnectionType"
        properties:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/ConnectionProperties"

    ConnectionProperties:
      type: object
      # for code generation purposes we can't use the following:
      # oneOf:
      #   - $ref: "#/components/schemas/BigQueryDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/ClickhouseDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/DB2DataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/HanaDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/HiveDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/HsqldbFoodmartDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/MsSQLDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/MySQLDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/OracleDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/PostgreSQLDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/S3DataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/TeraDataDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/MsSQLCDSDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/MsDynamicsDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/SAPERPDataSourceConnectionInfo"
      #   - $ref: "#/components/schemas/RedshiftDataSourceConnectionInfo"

    Connection:
      type: object
      required:
        - id
        - dataSourceId
        - name
        - description
        - createdAt
        - updatedAt
        - technology
        - type
        - properties
      properties:
        id:
          type: string
          format: uuid
        dataSourceId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^([a-zA-z_]+[a-z0-9_]*){2}$
        description:
          type: string
          maxLength: 255
        lastHeartbeatError:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        technology:
          $ref: "#/components/schemas/DataSourceTechnology"
        type:
          $ref: "#/components/schemas/ConnectionType"
        properties:
          $ref: "#/components/schemas/ConnectionProperties"

    ListConnectionsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          description: |
            A list of connections for a given data source.
          items:
            $ref: "#/components/schemas/Connection"

    ConnectionStats:
      properties:
        tableCount:
          type: integer
      required:
        - tableCount

    ConnectionTestWithStatsResult:
      properties:
        message:
          type: string
        stats:
          $ref: "#/components/schemas/ConnectionStats"
        valid:
          type: boolean
      required:
        - valid

    ConnectionType:
      type: string
      enum:
        - primary
        - other

    UpdateFieldsRequest:
      type: object
      required:
        - fields
      description: |
        The `fields` array should contain all of the fields in the desired order.

        Additionally, we require all field specifications _must_ contain the following fields:

          *   `category`
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpecUpdateRequest"

    FieldsResponse:
      type: object
      description: |
        The `fields` will contain all of the custom metadata fields as well as the system fields,
        in order.
      required:
        - fields
      properties:
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"

    FieldSpec:
      type: object
      required:
        - name
        - key
        - type
        - kind
        - filterable
        - searchable
        - description
        - hideIfEmpty
      properties:
        name:
          type: string
          description: |
            A nice computer-readable name for that field usable in postgres
        key:
          type: string
          description: |
            lookup key for the field on the specific response types in dot notation.
            Examples:
              `name` -> name is found toplevel of the instance object, i.e. `obj.name`
              `properties.category` -> category is found in the properties subobject, i.e. `obj.properties.category`
        description:
          type: string
          maxLength: 255
          description: |
            A description of the purpose of this field
        filterable:
          type: boolean
          default: false
          description: |
            Should this field show up as a filter in the catalog
        searchable:
          type: boolean
          default: false
          description: |
            Should this field be used in the catalog fuzzy search
        hideIfEmpty:
          type: boolean
          default: false
          description: |
            Should this field be hidden when the value is empty
        displayName:
          type: string
          description: |
            A nice human-readable name for that field
        type:
          $ref: "#/components/schemas/FieldType"
        kind:
          $ref: "#/components/schemas/FieldKind"
        validValues:
          type: array
          items:
            type: string
        minValue:
          type: number
          nullable: true
        maxValue:
          type: number
          nullable: true

    FieldSpecUpdateRequest:
      type: object
      required:
        - name
        - type
        - kind
        - filterable
        - searchable
        - description
      properties:
        name:
          type: string
          description: |
            A nice computer-readable name for that field usable in postgres
        description:
          type: string
          maxLength: 255
          description: |
            A description of the purpose of this field
        filterable:
          type: boolean
          default: false
          description: |
            Should this field show up as a filter in the catalog
        searchable:
          type: boolean
          default: false
          description: |
            Should this field be used in the catalog fuzzy search
        displayName:
          type: string
          description: |
            A nice human-readable name for that field
        type:
          $ref: "#/components/schemas/FieldType"
        kind:
          $ref: "#/components/schemas/FieldKind"
        validValues:
          type: array
          items:
            type: string
        minValue:
          type: number
          nullable: true
        maxValue:
          type: number
          nullable: true


    FieldType:
      type: string
      description: |
        The data type of the field:

        - `text` is an arbitrary string

        - `multitext` is an arbitrary array of strings

        - `select` a value which can be selected from a list

        - `multiselect` is a `select` with multiple selected values, represented as an array

        - `boolean` is `true` or `false` value

        - `date` is a date string in `yyyy-mm-dd` format, e.g. `2019-08-21`

        - `datetime` is an RFC3339 datetime string, e.g. `2019-08-21T11:54:30.369917Z`

        - `number` is a numeric value, described by RFC8259, section 6.

        - `link` is a link object with a displayed text and URL, e.g. `{"displayText": "text", "url": "http://example.com"}`. Only absolute URLs with HTTP/HTTPS protocol are allowed.

      enum:
        - text
        - multitext
        - select
        - multiselect
        - boolean
        - date
        - datetime
        - number
        - link

    FieldKind:
      type: string
      readOnly: true
      description: |
        The source type of the field.

        - System fields are non-editable default fields.  These can not be modified for deleted.

        - Configurable fields are editable default fields. These can be modified but not deleted.

        - Custom are user defined fields. These are fully defined by the user.

      enum:
        - system
        - configurable
        - custom

    PagedCustomFieldResponse:
      type: object
      required:
        - page
        - data
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        data:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"

    CreateCustomFieldRequest:
      type: object
      required:
        - type
        - name
        - filterable
        - searchable
        - hideIfEmpty
      properties:
        type:
          $ref: "#/components/schemas/FieldType"
        name:
          type: string
          description: |
            A nice computer-readable name for that field usable in postgres
        description:
          type: string
          maxLength: 255
          description: |
            A description of the purpose of this field
        filterable:
          type: boolean
          default: false
          description: |
            Should this field show up as a filter in the catalog
        hideIfEmpty:
          type: boolean
          default: false
          description: |
            Should this field be hidden when its value is empty
        searchable:
          type: boolean
          default: false
          description: |
            Should this field be used in the catalog fuzzy search
        displayName:
          type: string
          description: |
            A nice human-readable name for that field
        validValues:
          type: array
          items:
            type: string
        minValue:
          type: number
          nullable: true
        maxValue:
          type: number
          nullable: true

    UpdateFieldSetRequest:
      type: object
      required:
        - fields
      properties:
        fields:
          type: array
          items:
            type: string
            description: A list of custom field names in display order

    UpdateCustomFieldRequest:
      type: object
      properties:
        description:
          type: string
          maxLength: 255
          nullable: true
          description: |
            A description of the purpose of this field
        filterable:
          type: boolean
          nullable: true
          description: |
            Should this field show up as a filter in the catalog
        searchable:
          type: boolean
          nullable: true
          description: |
            Should this field be used in the catalog fuzzy search
        hideIfEmpty:
          type: boolean
          nullable: true
          description: |
            Should this field be hidden when its value is empty
        displayName:
          type: string
          nullable: true
          description: |
            A nice human-readable name for that field
        validValues:
          type: array
          nullable: true
          items:
            type: string
        minValue:
          type: number
          nullable: true
        maxValue:
          type: number
          nullable: true

    UseCaseStatistics:
      type: object
      description: Various statistics about the use case
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this use case
          type: integer
        dependencyCount:
          description: How many dependencies this resources use case has
          type: integer

    UseCaseActions:
      description: List of actions allowed to perform on the use case
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the use case. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - query
            - admin
        read:
          description: |
            If true the user is allowed to read the use case and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the use case
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the use case to other users
          type: boolean

    UseCaseResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the data source
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this usecase couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/UseCaseActions"
        stats:
          $ref: "#/components/schemas/UseCaseStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - icon
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - properties
        - resourceActions
        - stats

    UseCaseInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/UseCaseResponse"

    UseCaseCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
      required:
        - displayName
        - isPublic

    UseCaseUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
        externalId:
          type: string
          nullable: true

    BIReportStatistics:
      type: object
      description: Various statistics about the BI Report
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this BI Report
          type: integer
        dependencyCount:
          description: How many dependencies this resources BI Report has
          type: integer

    BIReportActions:
      description: List of actions allowed to perform on the BI Report
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the BI Report. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the BI Report and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the BI Report
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the use case to other users
          type: boolean

    BIReportResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the data source
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this usecase couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        externalURL:
          type: string
        externalEmbeddableURL:
          type: string
        externalThumbnailURL:
          type: string
        "type":
          $ref: "#/components/schemas/BIReportType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/BIReportActions"
        stats:
          $ref: "#/components/schemas/BIReportStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - icon
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - externalURL
        - externalEmbeddableURL
        - externalThumbnailURL
        - type
        - properties
        - resourceActions
        - stats

    BIReportInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/BIReportResponse"

    BIReportCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        externalURL:
          type: string
        externalEmbeddableURL:
          type: string
        externalThumbnailURL:
          type: string
        "type":
          $ref: "#/components/schemas/BIReportType"
      required:
        - displayName
        - isPublic

    BIReportUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true
        externalURL:
          type: string
          nullable: true
        externalEmbeddableURL:
          type: string
          nullable: true
        externalThumbnailURL:
          type: string
          nullable: true

    GlossaryItemStatistics:
      type: object
      description: Various statistics about the glossary item
      required:
        - linkCount
      properties:
        linkCount:
          description: How many resources are linked to this glossary item
          type: integer

    GlossaryItemActions:
      description: List of actions allowed to perform on the glossary item
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            Aggregated role name. This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the glossary item. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the glossary item and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the glossary item
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the glossary item
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the glossary item to other users
          type: boolean
        createChild:
          description: If true the user is allowed to create child glossary items
          type: boolean

    GlossaryTreeResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          type: array
          items:
            $ref: "#/components/schemas/GlossaryTree"

    GlossaryTree:
      type: object
      required:
        - resource
        - children
      properties:
        resource:
          $ref: "#/components/schemas/GlossaryItemResponse"
        children:
          type: array
          items:
            $ref: "#/components/schemas/GlossaryTree"

    GlossaryItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        glossaryParentId:
          type: string
          format: uuid
          nullable: true
        path:
          description: Path of all parent glossary items starting from the top level category
          type: array
          items:
            type: string
            format: uuid
        displayNamePath:
          description: Path of all parent glossary item display names starting from the top level category
          type: array
          items:
            type: string
            maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the resource
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        externalId:
          type: string
          nullable: true
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/GlossaryItemActions"
        stats:
          $ref: "#/components/schemas/GlossaryItemStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - path
        - displayNamePath
        - icon
        - description
        - documentation
        - isPublic
        - createdAt
        - updatedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats
        - glossaryParentId

    GlossaryItemInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/GlossaryItemResponse"

    GlossaryItemCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        glossaryParentId:
          type: string
          format: uuid
          nullable: true
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
      required:
        - displayName
        - isPublic

    GlossaryItemUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        glossaryParentId:
          type: string
          format: uuid
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    ApplicationStatistics:
      type: object
      description: Various statistics about the application
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this application
          type: integer
        dependencyCount:
          description: How many dependencies this resources application has
          type: integer

    ApplicationActions:
      description: List of actions allowed to perform on the application
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the resource. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the resource and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the resource
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the resource to other users
          type: boolean

    ApplicationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this application couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/ApplicationType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/ApplicationActions"
        stats:
          $ref: "#/components/schemas/ApplicationStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats

    ApplicationInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/ApplicationResponse"

    ApplicationCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/ApplicationType"
      required:
        - displayName
        - isPublic

    ApplicationUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    ApplicationType:
      type: string
      enum:
        - generic
        # TECHDEBT: our enum code generator will  turn ApplicationType into a constant
        # if it only has one value, but the resulting code can not compile because it will use
        # ApplicationType as a type not a value. In general, the value "unknown" shouldn't be used.
        - unknown

    StreamStatistics:
      type: object
      description: Various statistics about the stream
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this stream
          type: integer
        dependencyCount:
          description: How many dependencies this resources stream has
          type: integer

    StreamActions:
      description: List of actions allowed to perform on the stream
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the resource. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the resource and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the resource
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the resource to other users
          type: boolean

    StreamResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this stream couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/StreamType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/StreamActions"
        stats:
          $ref: "#/components/schemas/StreamStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats

    StreamInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/StreamResponse"

    StreamCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/StreamType"
      required:
        - displayName
        - isPublic

    StreamUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    StreamType:
      type: string
      enum:
        - generic
        # TECHDEBT: our enum code generator will  turn StreamType into a constant
        # if it only has one value, but the resulting code can not compile because it will use
        # ApplicationType as a type not a value. In general, the value "unknown" shouldn't be used.
        - unknown

    PipelineStatistics:
      type: object
      description: Various statistics about the pipeline
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this pipeline
          type: integer
        dependencyCount:
          description: How many dependencies this resource has
          type: integer

    PipelineActions:
      description: List of actions allowed to perform on the pipeline
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            Aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the resource. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the resource and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the resource
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the resource to other users
          type: boolean

    PipelineResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this pipeline couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/PipelineType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/PipelineActions"
        stats:
          $ref: "#/components/schemas/PipelineStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats

    PipelineInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/PipelineResponse"

    PipelineCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/PipelineType"
      required:
        - displayName
        - isPublic

    PipelineUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    PipelineType:
      type: string
      enum:
        - generic
        # TECHDEBT: our enum code generator will  turn PipelineType into a constant
        # if it only has one value, but the resulting code can not compile because it will use
        # PipelineType as a type not a value. In general, the value "unknown" shouldn't be used.
        - unknown

    APIStatistics:
      type: object
      description: Various statistics about the API
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this API
          type: integer
        dependencyCount:
          description: How many dependencies this API has
          type: integer

    APIActions:
      description: List of actions allowed to perform on the API
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            Aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on this resource. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the resource and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the resource
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the resource to other users
          type: boolean

    APIResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this API couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/APIType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/APIActions"
        stats:
          $ref: "#/components/schemas/APIStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats

    APIInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/APIResponse"

    APICreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/APIType"
      required:
        - displayName
        - isPublic

    APIUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    APIType:
      type: string
      enum:
        - generic
        - rest
        - rpc
        - graphql

    ModelStatistics:
      type: object
      description: Various statistics about the model
      required:
        - dependantCount
        - dependencyCount
      properties:
        dependantCount:
          description: How many resources depend on this model
          type: integer
        dependencyCount:
          description: How many dependencies this resources model has
          type: integer

    ResourceIdList:
      type: object
      required:
        - resourceIds
      properties:
        resourceIds:
          type: array
          items:
            type: string

    ModelActions:
      description: List of actions allowed to perform on the model
      type: object
      required:
        - role
        - read
        - editMetadata
        - delete
        - grant
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the resource. In general, this will only be returned if the
            resource is `public`, indicating that the user can read the resource metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the Model returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - admin
        read:
          description: |
            If true the user is allowed to read the resource and its connections/links
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the resource
          type: boolean
        delete:
          description: |
            If true the user is allowed to delete the resource
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the resource to other users
          type: boolean

    ModelResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this model couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/ModelType"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/ModelActions"
        stats:
          $ref: "#/components/schemas/ModelStatistics"
      required:
        - id
        - projectId
        - name
        - displayName
        - description
        - documentation
        - isPublic
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - externalId
        - type
        - properties
        - resourceActions
        - stats

    ModelInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/ModelResponse"

    ModelCreateRequest:
      type: object
      properties:
        displayName:
          type: string
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        "type":
          $ref: "#/components/schemas/ModelType"
      required:
        - displayName
        - isPublic

    ModelUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object
          nullable: true
        externalId:
          type: string
          nullable: true

    ModelType:
      type: string
      enum:
        - generic
        # TECHDEBT: our enum code generator will  turn ModelType into a constant
        # if it only has one value, but the resulting code can not compile because it will use
        # ModelType as a type not a value. In general, the value "unknown" shouldn't be used.
        - unknown

    LinkCreateRequest:
      type: object
      required:
        - sourceId
        - targetId
        - type
      properties:
        sourceId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/LinkType"

    LinkList:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        data:
          type: array
          items:
            $ref: "#/components/schemas/LinkResponse"
      required:
        - page
        - data

    LinkResponse:
      type: object
      required:
        - linkId
        - sourceId
        - sourceKind
        - sourceDisplayNamePath
        - targetId
        - targetKind
        - targetDisplayNamePath
        - type
      properties:
        linkId:
          type: string
          format: uuid
        sourceId:
          type: string
          format: uuid
        sourceKind:
          $ref: "#/components/schemas/ResourceKind"
        sourceDisplayNamePath:
          type: array
          items:
            type: string
        targetId:
          type: string
          format: uuid
        targetKind:
          $ref: "#/components/schemas/ResourceKind"
        targetDisplayNamePath:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/schemas/LinkType"

    LinkType:
      type: string
      enum:
        - "reference"
        - "dependency"
        - "replacement"
        - "glossary"

    LinkListOrder:
      type: string
      enum:
        - "sourceId"
        - "targetId"

    SearchOrder:
      type: string
      enum:
        - resourceId
        - createdAt
        - updatedAt
        - name
        - displayName

    DataSourceCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        displayName:
          type: string
          minLength: 0
          maxLength: 63
        description:
          type: string
          maxLength: 255
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        type:
          $ref: "#/components/schemas/DataSourceType"
        technology:
          $ref: "#/components/schemas/DataSourceTechnology"
        connectionInfo:
          $ref: "#/components/schemas/ConnectionProperties"
      required:
        - name
        - isPublic
        - type

    DataSourceUpdateRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        displayName:
          type: string
          maxLength: 63
          nullable: true
        icon:
          type: string
          nullable: true
        externalId:
          type: string
          nullable: true
        documentation:
          type: string
          nullable: true
        isPublic:
          type: boolean
          nullable: true
        properties:
          type: object

    DataSourceInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/DataSourceResponse"

    PagedSearchResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        dataSourceFieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        tableFieldspec:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DataSourceSearchResponse"
      required:
        - page
        - data
        - dataSourceFieldspec
        - tableFieldspec

    DataSourceSearchResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        displayName:
          type: string
          maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the data source
        type:
          $ref: "#/components/schemas/DataSourceType"
        description:
          type: string
        highlight:
          type: string
          description: "contains the matching parts of the description"
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        technology:
          $ref: "#/components/schemas/DataSourceTechnology"
        properties:
          type: object
        resourceActions:
          $ref: "#/components/schemas/DataSourceActions"
        stats:
          $ref: "#/components/schemas/DataSourceStatistics"
        tables:
          type: array
          description: First N matching tables, N equals tableCount query parameter
          items:
            $ref: "#/components/schemas/TableSearchResponse"
        matchingTableCount:
          type: integer
          format: int32
          description: Total number of matching tables in this data source
      required:
        - id
        - projectId
        - name
        - type
        - icon
        - isPublic
        - description
        - documentation
        - createdAt
        - updatedAt
        - properties
        - syncTask
        - resourceActions

    PagedSearchResponseV2:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        fieldSpecs:
          type: object
          nullable: true
          description: Map from resource kind to fieldspec array
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/FieldSpec"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SearchResponse"
      required:
        - page
        - data
        - fieldSpecs

    SearchCategory:
      type: string
      description: A value that describes which resource kinds (`ResourceKind`) to include in the search response.
      enum:
        - data
        - bi
        - usecase
        - glossary
        - application
        - pipeline
        - api
        - model
        - stream

    SearchResponse:
      type: object
      required:
        - kind
        - resource
        - meta
        - children
      properties:
        kind:
          $ref: "#/components/schemas/ResourceKind"
        resource:
          oneOf:
            - $ref: "#/components/schemas/DataSourceResponse"
            - $ref: "#/components/schemas/TableResponse"
            - $ref: "#/components/schemas/ColumnResponse"
            - $ref: "#/components/schemas/UseCaseResponse"
            - $ref: "#/components/schemas/BIReportResponse"
            - $ref: "#/components/schemas/GlossaryItemResponse"
            - $ref: "#/components/schemas/ApplicationResponse"
            - $ref: "#/components/schemas/PipelineResponse"
            - $ref: "#/components/schemas/APIResponse"
            - $ref: "#/components/schemas/ModelResponse"
            - $ref: "#/components/schemas/StreamResponse"
        meta:
          type: object
          required:
            - descriptionHighlight
            - rank
          properties:
            descriptionHighlight:
              type: string
              description: Matching part of the description with highlighting
            rank:
              type: number
              description: The search score of the resource
        children:
          type: array
          description: List of search responses that holds matches that are direct children of this resource
          items:
            $ref: "#/components/schemas/SearchResponse"

    ResourceDumpResponseBody:
      type: object
      properties:
        fieldSpecs:
          type: object
          description: Map from resource kind to fieldspec array
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/FieldSpec"
        data:
          $ref: "#/components/schemas/ResourceDumpResponse"
      required:
        - data
        - fieldSpecs

    ResourceDumpResponse:
      type: object
      required:
        - id
        - kind
        - projectId
        - name
        - icon
        - isPublic
        - externalId
        - description
        - documentation
        - createdAt
        - updatedAt
        - properties
        - customProperties
        - stats
      properties:
        kind:
          $ref: "#/components/schemas/ResourceKind"
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        displayName:
          type: string
          maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the data source
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        externalId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        properties:
          oneOf:
            - $ref: "#/components/schemas/DataSourceProperties"
            - $ref: "#/components/schemas/TableProperties"
            - $ref: "#/components/schemas/ColumnProperties"
            - $ref: "#/components/schemas/EmptyObject"
        customProperties:
          type: object
        stats:
          oneOf:
            - $ref: "#/components/schemas/ResourceStatistics"
            - $ref: "#/components/schemas/EmptyObject"
        children:
          type: array
          description: List of responses that holds matches that are direct children of this resource
          items:
            $ref: "#/components/schemas/ResourceDumpResponse"

    ResolveAccessRequestRequest:
      type: object
      description: |
        Request data when resolving a access request
        If the role is empty it defaults to `query` for data sources and `steward` for usecases.
      required:
        - state
      properties:
        state:
          $ref: "#/components/schemas/AccessRequestState"
        comment:
          type: string
          description: Comment explaining why the request was granted/rejected
        role:
          $ref: "#/components/schemas/Role"

    ResourceStatistics:
      type: object
      description: Various statistics about the resource
      required:
        - childCount
      properties:
        childCount:
          description: How many child resources are connected to it
          type: integer

    DataSourceProperties:
      type: object
      required:
        - type
      properties:
        "type":
          $ref: "#/components/schemas/DataSourceType"
        "technology":
          $ref: "#/components/schemas/DataSourceTechnology"
        "lastUpdateErrorMessage":
          type: string
          description: "contains an error message indicating why this data source schema could not be updated"

    DataSourceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        displayName:
          type: string
          maxLength: 63
        icon:
          type: string
          description: Name of an icon that is assigned to the data source
        type:
          $ref: "#/components/schemas/DataSourceType"
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        isPublic:
          type: boolean
        isOrphaned:
          description: Indicates that this datasource couldn't be synced from an external system
          type: boolean
        externalId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        technology:
          $ref: "#/components/schemas/DataSourceTechnology"
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this data source schema could not be updated"
        properties:
          type: object
        syncTask:
          $ref: "#/components/schemas/DataSourceSyncTask"
        resourceActions:
          $ref: "#/components/schemas/DataSourceActions"
        stats:
          $ref: "#/components/schemas/DataSourceStatistics"
      required:
        - id
        - projectId
        - name
        - type
        - icon
        - isPublic
        - isOrphaned
        - description
        - documentation
        - externalId
        - createdAt
        - updatedAt
        - orphanedAt
        - properties
        - syncTask
        - resourceActions

    ExternalDataSourceSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        technology:
          $ref: "#/components/schemas/DataSourceTechnology"
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this data source schema could not be updated"
      required:
        - id
        - projectId
        - name
        - createdAt
        - updatedAt
        - technology

    FullConnectionsListResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/FullConnectionsResponse"

    FullConnectionsResponse:
      type: object
      required:
        - dataSource
        - connections
      properties:
        dataSource:
          $ref: "#/components/schemas/ExternalDataSourceSummaryResponse"
        connections:
          type: array
          items:
            $ref: "#/components/schemas/Connection"

    DataSourceSyncTask:
      type: object
      nullable: true
      required:
        - taskId
        - createdAt
        - startedAt
        - updatedAt
        - finishedAt
        - message
        - status
      properties:
        taskId:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        finishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        message:
          type: string
          nullable: true
        status:
          type: string
          readOnly: true
          enum:
            - waiting
            - running
            - cancelled
            - finished
            - failed

    DataSourceActions:
      description: List of actions allowed to perform on the data source
      type: object
      required:
        - role
        - read
        - createTable
        - edit
        - editMetadata
        - delete
        - upload
        - grant
        - query
        - refresh
        - profile
      properties:
        role:
          type: string
          description: |
            aggregated role name.  This can be used to indicate the total role level that is represented by the users available
            actions.

            The value `none` indicates that the user has no direct permissions on the data source. In general, this will only be returned if the data
            source is `public`, indicating that the user can read the data source metadata, but can not otherwise perform any other actions.

            The value `admin` indicates the user is a project admin, and therefore is allowed all available actions, overriding any other specific
            permissions that may have been directly granted to the user or a group they are in.

            The other allowed values correspond to a specific `Role`. This indicates that the user or a group they are in was directly granted this role.
            In this case, the API returns the role name with the highest access levels.
          enum:
            - none
            - owner
            - steward
            - query
            - admin
        read:
          description: |
            If true the user is allowed to:

              1) read the data source and its tables

              2) read the list of import tasks for a managed data source
          type: boolean
        createTable:
          description: |
            If true the user is allowed to create tables in the data source
          type: boolean
        edit:
          description: |
            If true the user is allowed to:

              1) edit the data source and its tables

              2) edit materialization preferences for a view
          type: boolean
        editMetadata:
          description: If true the user is allowed to edit the metadata of the data source and its tables
          type: boolean
        delete:
          description: |
            If true the user is allowed to

              1) delete the data source and its tables

              2) Truncate a table in a managed data source
          type: boolean
        upload:
          description: |
            If true the user is allowed to:

              1) upload data to the managed data source

              2) cancel an import task for a manged data source
          type: boolean
        grant:
          description: If true the user is allowed to grant permissions for the data source to other users
          type: boolean
        query:
          description: If true the user is allowed to query the data source
          type: boolean
        refresh:
          description: If true the user is allowed to refresh the data source's schema
          type: boolean
        profile:
          description: If true the user is allowed to read and trigger profiling sessions
          type: boolean

    DataSourceStatistics:
      type: object
      description: Various statistics about the data source
      required:
        - tableCount
      properties:
        tableCount:
          description: How many tables the data source has
          type: integer

    TableStatistics:
      type: object
      description: Various statistics about the table
      required:
        - columnCount
      properties:
        columnCount:
          description: How many columns the table
          type: integer

    TableProperties:
      type: object
      required:
        - type
        - sql
        - currentColumnSetId
      properties:
        "type":
          $ref: "#/components/schemas/TableType"
        sql:
          type: string
        currentColumnSetId:
          type: string
          format: uuid
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this table schema could not be updated"

    BIReportProperties:
      type: object
      required:
        - type
        - externalURL
        - externalEmbeddableURL
        - externalThumbnailURL
      properties:
        "type":
          $ref: "#/components/schemas/BIReportType"
        externalURL:
          type: string
        externalEmbeddableURL:
          type: string
        externalThumbnailURL:
          type: string


    GlossaryItemProperties:
      type: object
      required:
        - path
        - displayNamePath
        - glossaryParentId
      properties:
        path:
          description: Array of ids representing the ancestor chain ot this glossary item
          type: array
          items:
            type: string
            format: uuid
        displayNamePath:
          description: Array of display names representing the ancestor chain of this glossary item, this should be used to create the "B2B → Customer → Address" label in the front-end
          type: array
          items:
            type: string
        glossaryParentId:
          type: string
          nullable: true
          format: uuid

    ColumnProperties:
      type: object
      required:
        - type
        - nullable
        - originalType
        - entities
      properties:
        type:
          $ref: "#/components/schemas/TableColumnType"
        originalType:
          type: string
        nullable:
          type: boolean
        entities:
          type: array
          nullable: true
          description: "A list of detected entities in the column"
          items:
            type: string

    EmptyObject:
      type: object
      properties: {}
      additionalProperties: false

    Filter:
      description: A filter to reduce the output of list requests
      type: object
      required:
        - property
        - operation
        - value
      properties:
        property:
          type: string
        operation:
          $ref: "#/components/schemas/OperationType"
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                type: string

    FilterSet:
      description: A set of filters which should all be applied
      type: object
      required:
        - filters
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/Filter"

    SearchFilters:
      description: Filters to be applied indexed by entity type
      type: object
      properties:
        datasource:
          type: array
          items:
            $ref: "#/components/schemas/Filter"
        table:
          type: array
          items:
            $ref: "#/components/schemas/Filter"
        usecase:
          type: array
          items:
            $ref: "#/components/schemas/Filter"

    OperationType:
      type: string
      enum:
        - eq
        - in
        - lt
        - lte
        - gt
        - gte
        - sub
        - sup
        - overlap

    PagedDataSourceResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        fieldspec:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DataSourceResponse"
      required:
        - page
        - data
        - fieldspec

    SchemaSyncStatus:
      type: string
      description: Describes the sync status for the data source schema. `partial` means the synchronization process failed but some of the tables were fetched successfully.
      enum:
        - success
        - fail
        - running
        - partial

    BIReportType:
      type: string
      enum:
        - contiamo
        - other

    TableType:
      type: string
      enum:
        - ViewTable
        - MaterializationTable
        - RegularTable

    # taken from the Pantheon spec SQlType
    # currently https://github.com/contiamo/pantheon/blob/master/docs/swagger.json#L1906
    TableColumnType:
      description: The data type of the table column as it was discovered from the data source.
      type: string
      enum:
        - boolean
        - varchar
        - smallint
        - integer
        - bigint
        - numeric
        - float
        - double precision
        - date
        - time
        - timestamp
        - other
        - "varchar array"
        - "integer array"

    ColumnResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tableId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        nullable:
          type: boolean
        type:
          $ref: "#/components/schemas/TableColumnType"
        originalType:
          description: The column type as named by the data source
          type: string
        isOrphaned:
          description: Indicates that this column couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        entities:
          type: array
          description: "A list of detected entities in the column"
          items:
            type: string
        properties:
          type: object
      required:
        - id
        - tableId
        - name
        - description
        - documentation
        - nullable
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - type
        - originalType
        - entities
        - properties

    TableResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dataSourceId:
          type: string
          format: uuid
        currentColumnSetId:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: "#/components/schemas/TableType"
        description:
          type: string
          maxLength: 255
        documentation:
          description: Long form markdown field that can be used to document the resource
          type: string
        sql:
          type: string
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this table schema could not be updated"
        isOrphaned:
          description: Indicates that this table couldn't be synced from an external system
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        orphanedAt:
          type: string
          nullable: true
          format: date-time
        properties:
          type: object
        stats:
          $ref: "#/components/schemas/TableStatistics"
      required:
        - id
        - dataSourceId
        - currentColumnSetId
        - name
        - type
        - description
        - documentation
        - isOrphaned
        - createdAt
        - updatedAt
        - orphanedAt
        - columns
        - properties
        - stats

    TableSearchResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dataSourceId:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: "#/components/schemas/TableType"
        description:
          type: string
        highlight:
          type: string
          description: "contains the matching parts of the description"
        sql:
          type: string
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this table schema could not be updated"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        properties:
          type: object
      required:
        - id
        - dataSourceId
        - name
        - type
        - description
        - createdAt
        - updatedAt
        - properties

    TableFieldSpec:
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        columns:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
      required:
        - tables
        - columns

    TableProfileRequest:
      type: object
      properties:
        sampleSize:
          type: integer
          description: Amount of rows to take for the profiling session

    TableEntityDetectionRequest:
      type: object
      properties:
        sampleSize:
          type: integer
          description: Amount of rows to take for the entity detection session

    TableProfileResponse:
      type: object
      required:
        - progress
      properties:
        progress:
          $ref: "#/components/schemas/ProfilingProgress"
        profile:
          $ref: "#/components/schemas/ProfileResponse"

    TableEntityDetectionResponse:
      type: object
      required:
        - progress
      properties:
        progress:
          $ref: "#/components/schemas/ProfilingProgress"
        entities:
          $ref: "#/components/schemas/EntityDetectionResponse"

    ProfilingProgress:
      type: object
      required:
        - startedAt
        - finishedAt
        - processed
        - total
      properties:
        startedAt:
          type: string
          format: date-time
          nullable: true
        finishedAt:
          type: string
          format: date-time
          nullable: true
        processed:
          type: integer
        total:
          type: integer
        error:
          type: string

    ColumnFieldSpec:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
      required:
        - columns

    ViewDetailsResponse:
      type: object
      required:
        - name
        - sql
        - materialization
      properties:
        name:
          type: string
        sql:
          type: string
        lastUpdateErrorMessage:
          type: string
          description: "contains an error message indicating why this table schema could not be updated"
        materialization:
          $ref: '#/components/schemas/MaterializationSpec'

    CreateManagedTableRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 56
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        description:
          type: string
          maxLength: 255
        expiresAt:
          type: string
          format: date-time
          description: Table will be deleted at the specified time
          nullable: true
        defaultInsertMode:
          $ref: "#/components/schemas/IngestInsertModeType"
        schema:
          $ref: "#/components/schemas/ManagedTableSchema"
      required:
        - name
        - description
        - defaultInsertMode
        - schema
        - expiresAt

    ManagedTableSchema:
      type: object
      description: Schema of a file or of the corresponding managed table which will be created
      required:
        - columns
        - indexes
      properties:
        indexes:
          description: |
            Definitions of the managed table indexes. These may be simple or compound indexes, i.e. they may contain one or more columns.
            The appropriate index will be chosen based on the storage engine.
          type: array
          items:
            $ref: "#/components/schemas/ManagedTableIndex"
          example:
            [
            {"columns": ["office", "event"], "indexType": "btree"},
            {"columns": ["timestamp"], "indexType": "btree"},
            ]
        columns:
          type: array
          description: Definitions of columns and their types. The order is important and should match the order of columns in the file which is going to be uploaded
          items:
            $ref: "#/components/schemas/ManagedTableColumn"
          example:
            [
              {"name": "timestamp", "type": "datetime", "required": true},
              {"name": "office", "type": "string", "required": false},
              {"name": "event", "type": "string", "required": true},
              {"name": "days_without_accident", "type": "integer", "required": false},
            ]

    ManagedTableColumn:
      type: object
      required:
        - name
        - type
        - required
      properties:
        name:
          description: The name of the column, length restrictions are inherited from the underlying database restriction on identifiers
          type: string
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
          minLength: 2
          maxLength: 63
        type:
          $ref: "#/components/schemas/ManagedTableColumnType"
        "required":
          type: boolean
          default: false

    ManagedTableColumnType:
      description: The data type of the column in a managed table
      type: string
      enum:
        - bool
        - integer
        - decimal
        - text
        - date
        - time
        - datetime

    IndexTypes:
      type: string
      description: Supported index types
      enum:
        - btree
        - hash
      default: "btree"

    ManagedTableIndex:
      type: object
      required:
        - columns
        - indexType
      properties:
        columns:
          type: array
          minItems: 1
          items:
            type: string
            description: The name of a column from the managed table columns array
            pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
            minLength: 2
            maxLength: 63
        indexType:
          $ref: "#/components/schemas/IndexTypes"

    IngestInsertModeType:
      description: |-
        Defines how to apply rows to a table.
        upsert: insert or update rows from the upload to the table
        append: insert rows from the upload to the table.
      type: string
      enum:
        - upsert
        - append

    FileIngestRequest:
      type: object
      required:
        - tableId
        - fileId
        - schema
        - options
        - insertMode
      properties:
        tableId:
          type: string
          description: Uuid or name of the table
        fileId:
          type: string
          description: ID of the uploaded file
          minLength: 2
          maxLength: 255
        schema:
          $ref: "#/components/schemas/ManagedTableSchema"
        options:
          $ref: "#/components/schemas/FileOptions"
        insertMode:
          $ref: "#/components/schemas/IngestInsertModeType"
        columnMapping:
          $ref: "#/components/schemas/ColumnMapping"

    ColumnMapping:
      description: |-
        Defines how to map the columns from a file to be ingested
        to the columns of the target table.
        This allows to reorder and/or drop certain columns of the input data
      type: array
      items:
        $ref: "#/components/schemas/ColumnMappingEntry"

    ColumnMappingEntry:
      type: object
      required:
        - source
        - target
      properties:
        source:
          type: string
          description: Name of the source column
        target:
          type: string
          description: Name of the target column

    FileOptions:
      type: object
      required:
        - preferredDateFormat
        - delimiter
        - decimalSeparator
        - encoding
        - commentCharacter
        - hasHeader
        - ignoreHeader
        - trimSpaces
      description: FileOptions determine how the file will be opened and parsed
      properties:
        preferredDateFormat:
          $ref: "#/components/schemas/FilePreferredDateFormat"
        delimiter:
          $ref: "#/components/schemas/FileDelimiter"
        decimalSeparator:
          $ref: "#/components/schemas/FileDecimalSeparator"
        encoding:
          $ref: "#/components/schemas/FileEncodingOption"
        commentCharacter:
          $ref: "#/components/schemas/FileCommentCharacter"
        hasHeader:
          $ref: "#/components/schemas/FileHasHeader"
        ignoreHeader:
          $ref: "#/components/schemas/FileIgnoreHeaders"
        trimSpaces:
          $ref: "#/components/schemas/FileTrimSpaces"

    FileEncodingOption:
      type: string
      description: FileEncodingOption determines the encoding used when opening the file.
      enum:
        - UTF-8
        - ISO-8859-1
        - ISO-8859-2
        - GBK
        - GB18030
        - Shift-JIS
        - EUC-JP
        - EUC-KR
        - KOI8-R

    FileTrimSpaces:
      type: boolean
      description: Determine if discovery should trim leading and trailing spaces from values. Note that spaces will always be trimmed from column names.
      default: true

    FileIgnoreHeaders:
      type: boolean
      description: If the file has headers, these are ignored when determining the column names
      default: false

    FileHasHeader:
      type: boolean
      description: Read the first non-empty line as the column headers/names
      default: true

    FileCommentCharacter:
      type: string
      maxLength: 2
      description: |
        The character used to indicate that a line is a comment, the line must start with this character.

        Common values include "#" and "//"

    FileDelimiter:
      type: string
      maxLength: 1
      description: |
        FileDelimiter is used to determine the column separator in a CSV file.

        Common values include 'comma', 'semicolon', and 'tab'

    FilePreferredDateFormat:
      type: string
      description: FilePreferredDateFormat determines how to parse ambiguous dates, such as '02-02-2010'.
      enum:
        - monthFirst
        - dayFirst
        - yearFirst

    FileDecimalSeparator:
      type: string
      description: FileDecimalSeparator determines how numeric values are parsed, e.g. '10,50'.
      enum:
        - numericPeriod
        - numericComma

    TaskResponse:
      type: object
      required:
        - taskId
        - collectionId
        - tableId
        - tableName
        - fileId
        - fileName
        - createdAt
        - startedAt
        - finishedAt
        - status
        - statusData
        - insertMode
        - upsertRows
        - upsertOn
      properties:
        taskId:
          type: string
          format: uuid
          readOnly: true
        collectionId:
          type: string
          format: uuid
          readOnly: true
        tableId:
          type: string
          format: uuid
          readOnly: true
        tableName:
          type: string
          readOnly: true
        fileId:
          type: string
          minLength: 2
          maxLength: 255
          readOnly: true
        fileName:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        finishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          $ref: "#/components/schemas/TaskStatus"
        statusData:
          $ref: "#/components/schemas/TaskStatusData"
        insertMode:
          $ref: "#/components/schemas/IngestInsertModeType"
        upsertOn:
            type: array
            description: |
              rows used to match file data to a possibly existing row, only used and required if insertMode is `upsert`
            items:
              type: string

    TaskStatus:
      type: string
      description: Current state of the task
      enum:
        - waiting
        - running
        - cancelled
        - finished
        - failed

    TaskStatusData:
      type: object
      required:
        - fileSize
        - importedRowCount
        - detectedRowCount
        - errorRowCount
      properties:
        fileSize:
          type: string
          readOnly: true
        importedRowCount:
          type: integer
          format: int32
          readOnly: true
          description: The number of rows successfully imported
        detectedRowCount:
          type: integer
          format: int32
          readOnly: true
          description: The number of rows that were detected in the import
        errorRowCount:
          type: integer
          format: int32
          readOnly: true
          description: The number of rows that errored during import

    PagedTaskResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TaskResponse"
      required:
        - page
        - data

    CreateViewRequest:
      type: object
      required:
        - name
        - sql
        - materialization
      description: Request for defining a View in a VirtualDB
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 63
          pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*$
        description:
          type: string
          maxLength: 255
        sql:
          type: string
        materialization:
          $ref: '#/components/schemas/MaterializationSpec'

    UpdateViewRequest:
      type: object
      description: Request for updating a View definition in a VirtualDB
      required:
        - sql
        - materialization
      properties:
        sql:
          type: string
        materialization:
            $ref: '#/components/schemas/MaterializationSpec'

    CreateAccessRequestRequest:
      type: object
      description: Request for creating a access request
      required:
        - comment
      properties:
        comment:
          type: string
          description: Comment why the user would like to access the resource.

    CreateLinkRequest:
      type: object
      description: Request for creating a link
      required:
        - sourceId
        - targetId
      properties:
        sourceId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/LinkType"

    AccessRequestResponse:
      type: object
      description: Object representing that one user requested access on a specific resource
      required:
        - id
        - state
        - requesterId
        - resourceId
        - comment
        - resolveComment
        - createdAt
        - resolvedAt
      properties:
        id:
          type: string
          format: uuid
        requesterId:
          type: string
          description: UUID of the user requesting access
          format: uuid
        resourceId:
          type: string
          description: |
            UUID of the resource. Since resources represent all other entities like data sources, tables and use cases, resource endpoints can be used for those entities as well.
          format: uuid
        state:
          $ref: "#/components/schemas/AccessRequestState"
        comment:
          type: string
          description: The reason why the access was requested.
        resolveComment:
          type: string
          description: The reason why the access was rejected/granted.
        createdAt:
          type: string
          description: The timestamp of the creation of this request.
          format: date-time
        resolvedAt:
          type: string
          description: The timestamp when this request has been granted.
          format: date-time
          nullable: true


    AccessRequestState:
      type: string
      enum: [pending, granted, rejected]
      description: "state of the request, either 'pending', 'granted' or 'rejected'"

    AccessRequestList:
      type: object
      required:
        - data
        - page
      description: |
        A list of access requests for a given resource.
        If you are a owner of the resource, then this will contain all requests for this resource from all users.
        If you are NOT a owner of the resource, you will only see your own requests.
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        data:
          type: array
          description: List of requests for a given resource
          items:
            $ref: "#/components/schemas/AccessRequestResponse"

    MaterializationSpec:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        cron:
          type: string
          description: |
            The cron schedule for updating the materialization (https://en.wikipedia.org/wiki/Cron#Overview).
            An empty string indicates a one-time-job.
        expiresValue:
          type: integer
          format: "int32"
          description: |
            Indicates how long before the materialization expires without being refreshed.
            A value of zero indicates the result does not expire.
        expiresUnit:
          $ref: "#/components/schemas/MaterializationTimeUnits"

    MaterializationTimeUnits:
      type: string
      nullable: true
      description: The time unit associated with expiresIn; can only be null if expiresIn is 0.
      enum:
        - hours
        - days
        - weeks

    TableUpdateRequest:
      type: object
      description: PATCH request body for Table metadata
      properties:
        description:
          type: string
          maxLength: 255
          nullable: true
        documentation:
          type: string
          nullable: true
        properties:
          type: object

    ColumnUpdateRequest:
      type: object
      description: PATCH request body for Column metadata
      properties:
        description:
          type: string
          nullable: true
          maxLength: 255
        documentation:
          type: string
          nullable: true
        entities:
          type: array
          nullable: true
          description: "A list of detected entities in the column"
          items:
            type: string
        properties:
          type: object

    TableInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          $ref: "#/components/schemas/TableFieldSpec"
        data:
          $ref: "#/components/schemas/TableResponse"

    ColumnInstanceResponse:
      type: object
      required:
        - fieldspec
        - data
      properties:
        fieldspec:
          $ref: "#/components/schemas/ColumnFieldSpec"
        data:
          $ref: "#/components/schemas/ColumnResponse"

    PageInfo:
      description: Contains the pagination metadata for a response
      type: object
      properties:
        itemCount:
          type: integer
          description: Total number of items
        itemsPerPage:
          type: integer
          description: |
            Maximum items that can be on the page. They may be different from
            the requested number of times
        unfilteredItemCount:
          type: integer
          description: Item count if filters were not applied
        current:
          type: integer
          description: The current page number using 1-based array indexing
      required:
        - itemCount
        - itemsPerPage
        - unfilteredItemCount
        - current

    DataSourceType:
      description: Type of a data source
      type: string
      enum:
        - managed
        - external
        - virtual

    DataSourceTechnology:
      description: Type of a data source
      type: string
      enum:
        - s3
        - bigquery
        - clickhouse
        - hsqldb-foodmart
        - db2
        - hive
        - mssql
        - mysql
        - oracle
        - postgresql
        - hana
        - teradata
        - mssql-cds
        - msdynamics
        - saperp
        - redshift

    S3DataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - path
            - accessKey
            - secretKey
          additionalProperties: true
          properties:
            path:
              type: string
            accessKey:
              type: string
            secretKey:
              type: string
              format: password

    BigQueryDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - project
            - schema
            - clientId
            - clientSecret
            - refreshToken
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            project:
              type: string
            schema:
              type: string
            clientId:
              type: string
            clientSecret:
              type: string
              format: password
            refreshToken:
              type: string
              format: password

    ClickhouseDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    HsqldbFoodmartDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object

    DB2DataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    HiveDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    MsSQLDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    MsSQLCDSDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    MsDynamicsDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    MySQLDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
            - protocol
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password
            protocol:
              type: string

    OracleDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password
            schema:
              type: string

    PostgreSQLDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
            - schema
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password
            schema:
              type: string

    SAPERPDataSourceConnectionInfo:
      x-support-required: true
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - tables
            - jco.client.user
            - jco.client.passwd
            - jco.client.ashost
            - jco.client.client
            - jco.client.sysnr
          additionalProperties: true
          properties:
            tables:
              type: string
            jco.client.user:
              type: string
            jco.client.ashost:
              type: string
            jco.client.client:
              type: string
            jco.client.sysnr:
              type: string
            jco.client.lang:
              type: string
            jco.client.passwd:
              type: string
              format: password

    HanaDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
            - schema
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password
            schema:
              type: string

    TeraDataDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password

    RedshiftDataSourceConnectionInfo:
      allOf:
        - $ref: "#/components/schemas/BaseConnectionInfo"
        - type: object
          required:
            - host
            - port
            - database
            - user
            - password
            - schema
          additionalProperties: true
          properties:
            host:
              type: string
            port:
              type: string
            database:
              type: string
            user:
              type: string
            password:
              type: string
              format: password
            schema:
              type: string

    BaseConnectionInfo:
      type: object
      description: |
        Contains parameters for connecting to the data source.
        If a parameter is not required and not set it will be replaced by the documented default value if any.
      properties:
        maxDirectConnections:
          type: integer
          description: Max numbers of connections that can be used for direct queries. `20` by default.
          minimum: 1
          maximum: 100
        maxEtlConnections:
          type: integer
          description: Max number of connections that can be used for ETL queries. `20` by default.
          minimum: 1
          maximum: 100

    QueryRequest:
      properties:
        customReference:
          type: string
        queryId:
          format: uuid
          type: string
        sql:
          type: string
      required:
        - sql

    QueryResponse:
      properties:
        columns:
          items:
            "$ref": "#/components/schemas/QueryResponseMetadata"
          type: array
        rows:
          description: 2D array of values
          items:
            items:
              nullable: true
              oneOf:
              - type: string
              - type: boolean
              - type: number
              - type: array
                items:
                  type: string
              - type: array
                items:
                  type: integer
              title: Result field
            title: Result row
            type: array
          type: array
      required:
      - columns
      - rows

    QueryResponseMetadata:
      type: object
      discriminator:
        propertyName: type
      oneOf:
      - $ref: "#/components/schemas/SqlColumnMetadata"
      properties: {}

    SqlColumnMetadata:
      properties:
        dataType:
          enum:
          - boolean
          - date
          - number
          - string
          - timestamp
          type: string
        name:
          type: string
          description: Column name
        nullable:
          type: boolean
          description: Whether this column is nullable. May currently be a stub that always returns true.
        originalType:
          type: string
          description: Information about the original type as provided by the upstream data source, if we have it.
        primitive:
          deprecated: true
          enum:
          - boolean
          - date
          - number
          - string
          - timestamp
          type: string
        ref:
          type: string
        sqlType:
          $ref: "#/components/schemas/TableColumnType"
          # description: A Pantheon data type. Refer to CIP PAN-61 for the original design. Value 'other' is a fallthrough type; in this case typically .originalType would also be set.\nMay still only have a stub implementation.
          # type: string
          # enum:
          #   - boolean
          #   - varchar
          #   - varchar array
          #   - smallint
          #   - integer
          #   - bigint
          #   - numeric
          #   - float
          #   - double precision
          #   - date
          #   - time
          #   - timestamp
          #   - other
        type:
          enum:
          - SqlColumnMetadata
          type: string
      required:
      - type
      - ref
      - dataType
      - primitive
      - name
      - nullable
      - sqlType

    PagedQueryHistoryResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/QueryHistoryResponse"
          type: array
        page:
          $ref: "#/components/schemas/PageInfo"
      required:
      - data
      - page

    QueryHistoryResponse:
      properties:
        id:
          format: uuid
          type: string
        backendLogicalPlan:
          type: string
        backendPhysicalPlan:
          type: string
        completedAt:
          format: date-time
          type: string
        completionStatus:
          type: object
          required:
            - type
          properties:
            "type":
              type: string
              enum:
                - Cancelled
                - Executing
                - Succeeded
                - Failed
            msg:
              type: string
        customReference:
          type: string
        dataSourceId:
          format: uuid
          type: string
        origin:
          type: string
          enum:
            - "Web"
            - "JDBC"
            - "External"
        plan:
          type: string
        query:
          type: string
        startedAt:
          format: date-time
          type: string
        type:
          $ref: "#/components/schemas/QueryHistoryRecordType"
        userId:
          format: "uuid"
          type: "string"

      required:
        - id
        - type
        - query
        - startedAt
        - origin

    QueryHistoryRecordType:
        enum:
          - Native
          - Catalog
        type: string

    QueryFileFormat:
      type: string
      enum:
        - csv
        - xlsx

    PagedMaterializationTaskResponse:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PageInfo"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MaterializationTaskResponse"
      required:
        - page
        - data

    MaterializationTaskResponse:
      type: object
      required:
        - taskId
        - createdAt
        - startedAt
        - finishedAt
        - status
        - statusData
      properties:
        taskId:
          type: string
          format: uuid
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        startedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        finishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          $ref: "#/components/schemas/TaskStatus"
        statusData:
          $ref: "#/components/schemas/TaskStatusData"

    ProfileRequest:
      type: object
      required:
        - projectId
        - sql
      properties:
        projectId:
          type: string
        sql:
          type: string
        sampleSize:
          type: number

    ProfileResponse:
      type: object
      nullable: true
      required:
        - metadata
        - columns
      properties:
        metadata:
            $ref: "#/components/schemas/Metadata"
        columns:
            additionalProperties:
                type: object
                oneOf:
                - $ref: "#/components/schemas/BooleanProfile"
                - $ref: "#/components/schemas/NumericProfile"
                - $ref: "#/components/schemas/StringProfile"
                - $ref: "#/components/schemas/DatetimeProfile"

    GapDetectionRequest:
      type: object
      required:
        - projectId
        - sql
        - column
      properties:
        projectId:
          type: string
        sql:
          type: string
        column:
          type: string

    GapDetectionResponse:
      type: object
      required:
        - interval
        - data
        - gaps
        - minCount
        - maxCount
      properties:
        interval:
          $ref: "#/components/schemas/Interval"
        data:
          type: array
          items:
            type: object
            properties:
              datetime:
                type: string
              count:
                type: number
        gaps:
          type: array
          items:
            type: object
            properties:
              start:
                type: string
              end:
                type: string
              duration:
                type: number
            required:
            - start
            - end
            - duration
        minCount:
          type: number
        maxCount:
          type: number
        meanGap:
          type: number

    EntityDetectionRequest:
      type: object
      required:
        - projectId
        - sql
      properties:
        projectId:
          type: string
        sql:
          type: string
        sampleSize:
          type: number

    EntityDetectionResponse:
      type: object
      nullable: true
      required:
        - metadata
        - columns
      properties:
        metadata:
            $ref: "#/components/schemas/Metadata"
        columns:
          additionalProperties:
            type: array
            nullable: true
            items:
              $ref: "#/components/schemas/EntityDetectionResult"

    EntityDetectionResult:
      type: object
      required:
        - entity
        - frequency
        - score
      properties:
        entity:
          type: string
        frequency:
          type: number
        score:
          type: number
        examples:
          type: array
          items:
            type: string

    PredefinedEntity:
      description: The available predefined entity types that the Profiler can detect, as opposed to any potential user-defined entity types and rules.
      type: string
      enum:
        - "LOCATION"
        - "US_BANK_NUMBER"
        - "IBAN_CODE"
        - "GERMAN_ID_CARD"
        - "CREDIT_CARD"
        - "PERSON"
        - "US_PASSPORT"
        - "PHONE_NUMBER"
        - "SG_NRIC_FIN"
        - "NRP"
        - "UK_NHS"
        - "US_DRIVER_LICENSE"
        - "IP_ADDRESS"
        - "CRYPTO"
        - "US_ITIN"
        - "EMAIL_ADDRESS"
        - "DOMAIN_NAME"
        - "DATE_TIME"
        - "US_SSN"

    Metadata:
      type: object
      required:
      - isSample
      properties:
        isSample:
          type: boolean
        sampleSize:
          type: number
        sampleType:
          type: string
          enum:
            - Limit
            - Random

    BooleanProfile:
      type: object
      required:
      - dataType
      - trueCount
      - truePercentage
      - falseCount
      - falsePercentage
      - nullCount
      - nullPercentage
      properties:
        dataType:
          type: string
          enum:
            - boolean
        trueCount:
          type: number
        truePercentage:
          type: number
        falseCount:
          type: number
        falsePercentage:
          type: number
        nullCount:
          type: number
        nullPercentage:
          type: number

    NumericProfile:
      type: object
      required:
      - dataType
      - histogram
      - nullCount
      - nullPercentage
      properties:
        dataType:
          type: string
          enum:
            - integer
            - float
        min:
          type: number
        max:
          type: number
        mean:
          type: number
        std:
          type: number
        histogram:
          $ref: "#/components/schemas/Histogram"
        nullCount:
          type: number
        nullPercentage:
          type: number
        type:
          type: string
          enum:
            - Latitude
            - Longitude

    StringProfile:
      type: object
      required:
      - dataType
      - unique
      - top20
      - nullCount
      - nullPercentage
      properties:
        dataType:
          type: string
          enum:
            - string
        unique:
          type: number
        top20:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: number
            required:
            - key
            - value
        min:
          type: number
        max:
          type: number
        mean:
          type: number
        nullCount:
          type: number
        nullPercentage:
          type: number
        type:
          type: string
          enum:
            - Email
        cardinality:
          type: string
          enum:
            - Unique
            - High
            - Medium
            - Low
            - Constant

    DatetimeProfile:
      type: object
      required:
      - dataType
      - min
      - max
      - histogram
      - nullCount
      - nullPercentage
      properties:
        dataType:
          type: string
          enum:
            - datetime
            - time
        min:
          description: Min date
          type: string
        max:
          description: Max date
          type: string
        histogram:
          $ref: "#/components/schemas/HistogramDatetime"
        nullCount:
          type: number
        nullPercentage:
          type: number
        interval:
          $ref: "#/components/schemas/Interval"

    Interval:
      type: string
      enum:
        - Hour
        - Day
        - Week
        - Month
        - Quarter
        - Year

    Histogram:
      type: object
      required:
      - counts
      - bins
      properties:
        counts:
          type: array
          items:
            type: number
        bins:
          type: array
          items:
            type: number

    HistogramDatetime:
      type: object
      required:
      - counts
      - bins
      properties:
        counts:
          type: array
          items:
            type: number
        bins:
          type: array
          items:
            type: string

    HighlightIndicatorStart:
      type: string
      enum:
        - '{{{'

    HighlightIndicatorStop:
      type: string
      enum:
        - '}}}'

    InternalAuthenticationRequest:
      type: object
      required:
        - token
      properties:
        identifier:
          description: User email if a personal access token is provided
          type: string
        token:
          description: Personal access token or service account token
          type: string
        connectionName:
          description: Name of the data source connection to auth against. Optional, authenticated against user's defualt if not set.
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^([a-zA-z_]+[a-z0-9_]*){2}$

    InternalAuthenticationResponse:
      type: object
      required:
        - identity
        - connection
      properties:
        identity:
          $ref: "#/components/schemas/Identity"
        connection:
          $ref: "#/components/schemas/Connection"

    ProjectResourceStatistics:
      type: object
      required:
        - data
      description: Contains various statistics on resources in a project
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProjectResourceStatisticsRootLevelItem"

    ProjectResourceStatisticsRootLevelItem:
      required:
        - category
        - totalCount
        - children
      properties:
        category:
          $ref: "#/components/schemas/SearchCategory"
        totalCount:
          description: How many resources are there in this category in the project
          type: integer
        children:
          type: array
          items:
            $ref: "#/components/schemas/ProjectResourceStatisticsItem"

    ProjectResourceStatisticsItem:
      required:
        - kind
        - count
        - children
      properties:
        kind:
          $ref: "#/components/schemas/ResourceKind"
        count:
          description: How many resources of this kind are there in the project
          type: integer
        children:
          type: array
          items:
            $ref: "#/components/schemas/ProjectResourceStatisticsItem"

    Identity:
      type: object
      description: Short description of the identity accessing the system.
      properties:
        id:
          description: UUID of the user or the service account.
          type: string
          format: uuid
        name:
          description: Full name of the user or a name of the service account.
          type: string
        email:
          description: Email associated with the user. It's blank for service accounts.
          type: string
      required:
        - id
        - name
